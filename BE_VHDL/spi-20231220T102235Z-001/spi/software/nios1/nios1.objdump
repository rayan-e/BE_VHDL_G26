
nios1.elf:     file format elf32-littlenios2
nios1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002cf8 memsz 0x00002cf8 flags r-x
    LOAD off    0x00003d18 vaddr 0x00012d18 paddr 0x0001402c align 2**12
         filesz 0x00001314 memsz 0x00001314 flags rw-
    LOAD off    0x00005340 vaddr 0x00015340 paddr 0x00015340 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002aa8  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  00012cd8  00012cd8  00003cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001314  00012d18  0001402c  00003d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00015340  00015340  00005340  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00015464  00015464  0000502c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000650  00000000  00000000  00005050  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008279  00000000  00000000  000056a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e9c  00000000  00000000  0000d919  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000031e0  00000000  00000000  000107b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c48  00000000  00000000  00013998  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ddb  00000000  00000000  000145e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000148c  00000000  00000000  000163bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00017848  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002c8  00000000  00000000  00017888  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001970e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00019711  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001971d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001971e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001971f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00019723  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00019727  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001972b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00019736  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00019741  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  0001974c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000000e  00000000  00000000  00019750  2**0
                  CONTENTS, READONLY
 29 .jdi          00004db3  00000000  00000000  0001975e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003c464  00000000  00000000  0001e511  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
00012cd8 l    d  .rodata	00000000 .rodata
00012d18 l    d  .rwdata	00000000 .rwdata
00015340 l    d  .bss	00000000 .bss
00015464 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios1_bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010350 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00012d18 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00010c0c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00010d94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010ed0 l     F .text	00000034 alt_dev_reg
00012df8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000111ac l     F .text	0000020c altera_avalon_jtag_uart_irq
000113b8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00011c74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011da8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011dd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00012174 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000122d4 l     F .text	0000003c alt_get_errno
00012310 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015360 g     O .bss	00000004 alt_instruction_exception_handler
00010cf8 g     F .text	0000006c alt_main
00015364 g     O .bss	00000100 alt_irq
0001402c g       *ABS*	00000000 __flash_rwdata_start
00010304 g     F .text	0000004c printf
00012780 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00015344 g     O .bss	00000004 errno
0001534c g     O .bss	00000004 alt_argv
0001c000 g       *ABS*	00000000 _gp
00010d64 g     F .text	00000030 usleep
00013e80 g     O .rwdata	00000180 alt_fd_list
000127a4 g     F .text	00000090 alt_find_dev
00012aec g     F .text	00000028 memcpy
00012258 g     F .text	0000007c alt_io_redirect
00012a00 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000115b0 g     F .text	0000021c altera_avalon_jtag_uart_read
000102c8 g     F .text	0000003c _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010b28 g     F .text	00000064 .hidden __udivsi3
00014018 g     O .rwdata	00000004 alt_max_fd
00014000 g     O .rwdata	00000004 _global_impure_ptr
00015464 g       *ABS*	00000000 __bss_end
00012084 g     F .text	000000f0 alt_iic_isr_register
00012678 g     F .text	00000108 alt_tick
00012038 g     F .text	0000004c alt_ic_irq_enabled
000125dc g     F .text	0000009c alt_alarm_stop
00015354 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00013e58 g     O .rwdata	00000028 alt_dev_null
00011d88 g     F .text	00000020 alt_dcache_flush_all
0001402c g       *ABS*	00000000 __ram_rwdata_end
00014010 g     O .rwdata	00000008 alt_dev_list
00010dd0 g     F .text	00000100 write
00012d18 g       *ABS*	00000000 __ram_rodata_end
00010b8c g     F .text	00000058 .hidden __umodsi3
00015464 g       *ABS*	00000000 end
000110ec g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00019c40 g       *ABS*	00000000 __alt_stack_pointer
000117cc g     F .text	00000224 altera_avalon_jtag_uart_write
000103bc g     F .text	0000052c ___vfprintf_internal_r
00012b14 g     F .text	00000190 __call_exitprocs
00010230 g     F .text	0000003c _start
00015358 g     O .bss	00000004 _alt_tick_rate
0001535c g     O .bss	00000004 _alt_nticks
00010f3c g     F .text	0000004c alt_sys_init
00011458 g     F .text	00000068 altera_avalon_jtag_uart_close
00010be4 g     F .text	00000028 .hidden __mulsi3
00012d18 g       *ABS*	00000000 __ram_rwdata_start
00012cd8 g       *ABS*	00000000 __ram_rodata_start
00010f88 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001293c g     F .text	000000c4 alt_get_fd
00011b1c g     F .text	00000158 alt_busy_sleep
00012abc g     F .text	00000030 memcmp
00011048 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015464 g       *ABS*	00000000 __alt_stack_base
00011098 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012834 g     F .text	00000108 alt_find_file
00011e10 g     F .text	000000a4 alt_dev_llist_insert
00010904 g     F .text	000000b8 __sfvwrite_small_dev
00015340 g       *ABS*	00000000 __bss_start
00015340 g     O .bss	00000001 data
0001026c g     F .text	0000005c main
00015350 g     O .bss	00000004 alt_envp
00010fe8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001401c g     O .rwdata	00000004 alt_errno
00010a30 g     F .text	00000084 .hidden __divsi3
00012cd8 g       *ABS*	00000000 __flash_rodata_start
00010f04 g     F .text	00000038 alt_irq_init
00012558 g     F .text	00000084 alt_release_fd
000109d8 g     F .text	00000058 _write_r
00014004 g     O .rwdata	00000004 _impure_ptr
00015348 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00014008 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011ed4 g     F .text	00000050 alt_ic_isr_register
0001402c g       *ABS*	00000000 _edata
00015464 g       *ABS*	00000000 _end
00010230 g       *ABS*	00000000 __ram_exceptions_end
000114c0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00011fac g     F .text	0000008c alt_ic_irq_disable
00012a9c g     F .text	00000020 exit
00010ab4 g     F .text	00000074 .hidden __modsi3
00019c40 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012ca4 g     F .text	00000034 _exit
000119f0 g     F .text	0000012c alt_alarm_start
000109bc g     F .text	0000001c strlen
000123fc g     F .text	0000015c open
00011eb4 g     F .text	00000020 alt_icache_flush_all
00014020 g     O .rwdata	00000004 alt_priority_mask
00011f24 g     F .text	00000088 alt_ic_irq_enable
000108e8 g     F .text	0000001c __vfprintf_internal
00014024 g     O .rwdata	00000008 alt_alarm_list
00011cb0 g     F .text	000000d8 close
00010c74 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	00800074 	movhi	r2,1
   10140:	1094d904 	addi	r2,r2,21348
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	00800074 	movhi	r2,1
   10158:	1094d904 	addi	r2,r2,21348
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff412c>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff4120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a4d817 	ldw	r2,-27808(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a4d817 	ldw	r2,-27808(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	dee71014 	ori	sp,sp,40000
    movhi gp, %hi(_gp)
   10238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1023c:	d6b00014 	ori	gp,gp,49152
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	1094d014 	ori	r2,r2,21312

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18d51914 	ori	r3,r3,21604

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <_gp+0xffff4254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	0010c740 	call	10c74 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	0010cf80 	call	10cf8 <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <_gp+0xffff4268>

0001026c <main>:




int main()
{
   1026c:	defffe04 	addi	sp,sp,-8
   10270:	dfc00115 	stw	ra,4(sp)
   10274:	df000015 	stw	fp,0(sp)
   10278:	d839883a 	mov	fp,sp
	while(1){
	data = IORD_ALTERA_AVALON_PIO_DATA(DATA_IN_BASE);
   1027c:	008000b4 	movhi	r2,2
   10280:	10840404 	addi	r2,r2,4112
   10284:	10800037 	ldwio	r2,0(r2)
   10288:	d0a4d005 	stb	r2,-27840(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data);
   1028c:	d0a4d003 	ldbu	r2,-27840(gp)
   10290:	10c03fcc 	andi	r3,r2,255
   10294:	008000b4 	movhi	r2,2
   10298:	10840004 	addi	r2,r2,4096
   1029c:	10c00035 	stwio	r3,0(r2)

	printf("DATA = %d \n",data);
   102a0:	d0a4d003 	ldbu	r2,-27840(gp)
   102a4:	10803fcc 	andi	r2,r2,255
   102a8:	100b883a 	mov	r5,r2
   102ac:	01000074 	movhi	r4,1
   102b0:	210b3604 	addi	r4,r4,11480
   102b4:	00103040 	call	10304 <printf>
	usleep(8000000);}
   102b8:	01001eb4 	movhi	r4,122
   102bc:	21048004 	addi	r4,r4,4608
   102c0:	0010d640 	call	10d64 <usleep>
   102c4:	003fed06 	br	1027c <_gp+0xffff427c>

000102c8 <_printf_r>:
   102c8:	defffd04 	addi	sp,sp,-12
   102cc:	dfc00015 	stw	ra,0(sp)
   102d0:	d9800115 	stw	r6,4(sp)
   102d4:	d9c00215 	stw	r7,8(sp)
   102d8:	20c00217 	ldw	r3,8(r4)
   102dc:	01800074 	movhi	r6,1
   102e0:	31824104 	addi	r6,r6,2308
   102e4:	19800115 	stw	r6,4(r3)
   102e8:	280d883a 	mov	r6,r5
   102ec:	21400217 	ldw	r5,8(r4)
   102f0:	d9c00104 	addi	r7,sp,4
   102f4:	00103bc0 	call	103bc <___vfprintf_internal_r>
   102f8:	dfc00017 	ldw	ra,0(sp)
   102fc:	dec00304 	addi	sp,sp,12
   10300:	f800283a 	ret

00010304 <printf>:
   10304:	defffc04 	addi	sp,sp,-16
   10308:	dfc00015 	stw	ra,0(sp)
   1030c:	d9400115 	stw	r5,4(sp)
   10310:	d9800215 	stw	r6,8(sp)
   10314:	d9c00315 	stw	r7,12(sp)
   10318:	00800074 	movhi	r2,1
   1031c:	10900104 	addi	r2,r2,16388
   10320:	10800017 	ldw	r2,0(r2)
   10324:	01400074 	movhi	r5,1
   10328:	29424104 	addi	r5,r5,2308
   1032c:	10c00217 	ldw	r3,8(r2)
   10330:	d9800104 	addi	r6,sp,4
   10334:	19400115 	stw	r5,4(r3)
   10338:	200b883a 	mov	r5,r4
   1033c:	11000217 	ldw	r4,8(r2)
   10340:	00108e80 	call	108e8 <__vfprintf_internal>
   10344:	dfc00017 	ldw	ra,0(sp)
   10348:	dec00404 	addi	sp,sp,16
   1034c:	f800283a 	ret

00010350 <print_repeat>:
   10350:	defffb04 	addi	sp,sp,-20
   10354:	dc800315 	stw	r18,12(sp)
   10358:	dc400215 	stw	r17,8(sp)
   1035c:	dc000115 	stw	r16,4(sp)
   10360:	dfc00415 	stw	ra,16(sp)
   10364:	2025883a 	mov	r18,r4
   10368:	2823883a 	mov	r17,r5
   1036c:	d9800005 	stb	r6,0(sp)
   10370:	3821883a 	mov	r16,r7
   10374:	04000a0e 	bge	zero,r16,103a0 <print_repeat+0x50>
   10378:	88800117 	ldw	r2,4(r17)
   1037c:	01c00044 	movi	r7,1
   10380:	d80d883a 	mov	r6,sp
   10384:	880b883a 	mov	r5,r17
   10388:	9009883a 	mov	r4,r18
   1038c:	103ee83a 	callr	r2
   10390:	843fffc4 	addi	r16,r16,-1
   10394:	103ff726 	beq	r2,zero,10374 <_gp+0xffff4374>
   10398:	00bfffc4 	movi	r2,-1
   1039c:	00000106 	br	103a4 <print_repeat+0x54>
   103a0:	0005883a 	mov	r2,zero
   103a4:	dfc00417 	ldw	ra,16(sp)
   103a8:	dc800317 	ldw	r18,12(sp)
   103ac:	dc400217 	ldw	r17,8(sp)
   103b0:	dc000117 	ldw	r16,4(sp)
   103b4:	dec00504 	addi	sp,sp,20
   103b8:	f800283a 	ret

000103bc <___vfprintf_internal_r>:
   103bc:	deffe504 	addi	sp,sp,-108
   103c0:	d8c00804 	addi	r3,sp,32
   103c4:	ddc01815 	stw	r23,96(sp)
   103c8:	dd801715 	stw	r22,92(sp)
   103cc:	dd401615 	stw	r21,88(sp)
   103d0:	dd001515 	stw	r20,84(sp)
   103d4:	dcc01415 	stw	r19,80(sp)
   103d8:	dc801315 	stw	r18,76(sp)
   103dc:	dc401215 	stw	r17,72(sp)
   103e0:	dc001115 	stw	r16,68(sp)
   103e4:	dfc01a15 	stw	ra,104(sp)
   103e8:	df001915 	stw	fp,100(sp)
   103ec:	2029883a 	mov	r20,r4
   103f0:	2823883a 	mov	r17,r5
   103f4:	382d883a 	mov	r22,r7
   103f8:	d9800f15 	stw	r6,60(sp)
   103fc:	0021883a 	mov	r16,zero
   10400:	d8000e15 	stw	zero,56(sp)
   10404:	d8000a15 	stw	zero,40(sp)
   10408:	002b883a 	mov	r21,zero
   1040c:	0027883a 	mov	r19,zero
   10410:	0025883a 	mov	r18,zero
   10414:	d8000c15 	stw	zero,48(sp)
   10418:	d8000b15 	stw	zero,44(sp)
   1041c:	002f883a 	mov	r23,zero
   10420:	d8c00915 	stw	r3,36(sp)
   10424:	d8c00f17 	ldw	r3,60(sp)
   10428:	19000003 	ldbu	r4,0(r3)
   1042c:	20803fcc 	andi	r2,r4,255
   10430:	1080201c 	xori	r2,r2,128
   10434:	10bfe004 	addi	r2,r2,-128
   10438:	10011e26 	beq	r2,zero,108b4 <___vfprintf_internal_r+0x4f8>
   1043c:	00c00044 	movi	r3,1
   10440:	b8c01426 	beq	r23,r3,10494 <___vfprintf_internal_r+0xd8>
   10444:	1dc00216 	blt	r3,r23,10450 <___vfprintf_internal_r+0x94>
   10448:	b8000626 	beq	r23,zero,10464 <___vfprintf_internal_r+0xa8>
   1044c:	00011506 	br	108a4 <___vfprintf_internal_r+0x4e8>
   10450:	01400084 	movi	r5,2
   10454:	b9401d26 	beq	r23,r5,104cc <___vfprintf_internal_r+0x110>
   10458:	014000c4 	movi	r5,3
   1045c:	b9402b26 	beq	r23,r5,1050c <___vfprintf_internal_r+0x150>
   10460:	00011006 	br	108a4 <___vfprintf_internal_r+0x4e8>
   10464:	01400944 	movi	r5,37
   10468:	1140fc26 	beq	r2,r5,1085c <___vfprintf_internal_r+0x4a0>
   1046c:	88800117 	ldw	r2,4(r17)
   10470:	d9000005 	stb	r4,0(sp)
   10474:	01c00044 	movi	r7,1
   10478:	d80d883a 	mov	r6,sp
   1047c:	880b883a 	mov	r5,r17
   10480:	a009883a 	mov	r4,r20
   10484:	103ee83a 	callr	r2
   10488:	1000d81e 	bne	r2,zero,107ec <___vfprintf_internal_r+0x430>
   1048c:	84000044 	addi	r16,r16,1
   10490:	00010406 	br	108a4 <___vfprintf_internal_r+0x4e8>
   10494:	01400c04 	movi	r5,48
   10498:	1140fa26 	beq	r2,r5,10884 <___vfprintf_internal_r+0x4c8>
   1049c:	01400944 	movi	r5,37
   104a0:	11400a1e 	bne	r2,r5,104cc <___vfprintf_internal_r+0x110>
   104a4:	d8800005 	stb	r2,0(sp)
   104a8:	88800117 	ldw	r2,4(r17)
   104ac:	b80f883a 	mov	r7,r23
   104b0:	d80d883a 	mov	r6,sp
   104b4:	880b883a 	mov	r5,r17
   104b8:	a009883a 	mov	r4,r20
   104bc:	103ee83a 	callr	r2
   104c0:	1000ca1e 	bne	r2,zero,107ec <___vfprintf_internal_r+0x430>
   104c4:	84000044 	addi	r16,r16,1
   104c8:	0000f506 	br	108a0 <___vfprintf_internal_r+0x4e4>
   104cc:	25fff404 	addi	r23,r4,-48
   104d0:	bdc03fcc 	andi	r23,r23,255
   104d4:	00c00244 	movi	r3,9
   104d8:	1dc00936 	bltu	r3,r23,10500 <___vfprintf_internal_r+0x144>
   104dc:	00bfffc4 	movi	r2,-1
   104e0:	90800426 	beq	r18,r2,104f4 <___vfprintf_internal_r+0x138>
   104e4:	01400284 	movi	r5,10
   104e8:	9009883a 	mov	r4,r18
   104ec:	0010be40 	call	10be4 <__mulsi3>
   104f0:	00000106 	br	104f8 <___vfprintf_internal_r+0x13c>
   104f4:	0005883a 	mov	r2,zero
   104f8:	b8a5883a 	add	r18,r23,r2
   104fc:	0000e206 	br	10888 <___vfprintf_internal_r+0x4cc>
   10500:	01400b84 	movi	r5,46
   10504:	1140e426 	beq	r2,r5,10898 <___vfprintf_internal_r+0x4dc>
   10508:	05c00084 	movi	r23,2
   1050c:	213ff404 	addi	r4,r4,-48
   10510:	27003fcc 	andi	fp,r4,255
   10514:	00c00244 	movi	r3,9
   10518:	1f000936 	bltu	r3,fp,10540 <___vfprintf_internal_r+0x184>
   1051c:	00bfffc4 	movi	r2,-1
   10520:	98800426 	beq	r19,r2,10534 <___vfprintf_internal_r+0x178>
   10524:	01400284 	movi	r5,10
   10528:	9809883a 	mov	r4,r19
   1052c:	0010be40 	call	10be4 <__mulsi3>
   10530:	00000106 	br	10538 <___vfprintf_internal_r+0x17c>
   10534:	0005883a 	mov	r2,zero
   10538:	e0a7883a 	add	r19,fp,r2
   1053c:	0000d906 	br	108a4 <___vfprintf_internal_r+0x4e8>
   10540:	00c01b04 	movi	r3,108
   10544:	10c0d226 	beq	r2,r3,10890 <___vfprintf_internal_r+0x4d4>
   10548:	013fffc4 	movi	r4,-1
   1054c:	99000226 	beq	r19,r4,10558 <___vfprintf_internal_r+0x19c>
   10550:	d8000b15 	stw	zero,44(sp)
   10554:	00000106 	br	1055c <___vfprintf_internal_r+0x1a0>
   10558:	04c00044 	movi	r19,1
   1055c:	01001a44 	movi	r4,105
   10560:	11001626 	beq	r2,r4,105bc <___vfprintf_internal_r+0x200>
   10564:	20800916 	blt	r4,r2,1058c <___vfprintf_internal_r+0x1d0>
   10568:	010018c4 	movi	r4,99
   1056c:	11008826 	beq	r2,r4,10790 <___vfprintf_internal_r+0x3d4>
   10570:	01001904 	movi	r4,100
   10574:	11001126 	beq	r2,r4,105bc <___vfprintf_internal_r+0x200>
   10578:	01001604 	movi	r4,88
   1057c:	1100c81e 	bne	r2,r4,108a0 <___vfprintf_internal_r+0x4e4>
   10580:	00c00044 	movi	r3,1
   10584:	d8c00e15 	stw	r3,56(sp)
   10588:	00001506 	br	105e0 <___vfprintf_internal_r+0x224>
   1058c:	01001cc4 	movi	r4,115
   10590:	11009826 	beq	r2,r4,107f4 <___vfprintf_internal_r+0x438>
   10594:	20800416 	blt	r4,r2,105a8 <___vfprintf_internal_r+0x1ec>
   10598:	01001bc4 	movi	r4,111
   1059c:	1100c01e 	bne	r2,r4,108a0 <___vfprintf_internal_r+0x4e4>
   105a0:	05400204 	movi	r21,8
   105a4:	00000f06 	br	105e4 <___vfprintf_internal_r+0x228>
   105a8:	01001d44 	movi	r4,117
   105ac:	11000d26 	beq	r2,r4,105e4 <___vfprintf_internal_r+0x228>
   105b0:	01001e04 	movi	r4,120
   105b4:	11000a26 	beq	r2,r4,105e0 <___vfprintf_internal_r+0x224>
   105b8:	0000b906 	br	108a0 <___vfprintf_internal_r+0x4e4>
   105bc:	d8c00a17 	ldw	r3,40(sp)
   105c0:	b7000104 	addi	fp,r22,4
   105c4:	18000726 	beq	r3,zero,105e4 <___vfprintf_internal_r+0x228>
   105c8:	df000d15 	stw	fp,52(sp)
   105cc:	b5c00017 	ldw	r23,0(r22)
   105d0:	b800080e 	bge	r23,zero,105f4 <___vfprintf_internal_r+0x238>
   105d4:	05efc83a 	sub	r23,zero,r23
   105d8:	02400044 	movi	r9,1
   105dc:	00000606 	br	105f8 <___vfprintf_internal_r+0x23c>
   105e0:	05400404 	movi	r21,16
   105e4:	b0c00104 	addi	r3,r22,4
   105e8:	d8c00d15 	stw	r3,52(sp)
   105ec:	b5c00017 	ldw	r23,0(r22)
   105f0:	d8000a15 	stw	zero,40(sp)
   105f4:	0013883a 	mov	r9,zero
   105f8:	d839883a 	mov	fp,sp
   105fc:	b8001726 	beq	r23,zero,1065c <___vfprintf_internal_r+0x2a0>
   10600:	a80b883a 	mov	r5,r21
   10604:	b809883a 	mov	r4,r23
   10608:	da401015 	stw	r9,64(sp)
   1060c:	0010b280 	call	10b28 <__udivsi3>
   10610:	a80b883a 	mov	r5,r21
   10614:	1009883a 	mov	r4,r2
   10618:	102d883a 	mov	r22,r2
   1061c:	0010be40 	call	10be4 <__mulsi3>
   10620:	b885c83a 	sub	r2,r23,r2
   10624:	00c00244 	movi	r3,9
   10628:	da401017 	ldw	r9,64(sp)
   1062c:	18800216 	blt	r3,r2,10638 <___vfprintf_internal_r+0x27c>
   10630:	10800c04 	addi	r2,r2,48
   10634:	00000506 	br	1064c <___vfprintf_internal_r+0x290>
   10638:	d8c00e17 	ldw	r3,56(sp)
   1063c:	18000226 	beq	r3,zero,10648 <___vfprintf_internal_r+0x28c>
   10640:	10800dc4 	addi	r2,r2,55
   10644:	00000106 	br	1064c <___vfprintf_internal_r+0x290>
   10648:	108015c4 	addi	r2,r2,87
   1064c:	e0800005 	stb	r2,0(fp)
   10650:	b02f883a 	mov	r23,r22
   10654:	e7000044 	addi	fp,fp,1
   10658:	003fe806 	br	105fc <_gp+0xffff45fc>
   1065c:	e6efc83a 	sub	r23,fp,sp
   10660:	9dc5c83a 	sub	r2,r19,r23
   10664:	0080090e 	bge	zero,r2,1068c <___vfprintf_internal_r+0x2d0>
   10668:	e085883a 	add	r2,fp,r2
   1066c:	01400c04 	movi	r5,48
   10670:	d8c00917 	ldw	r3,36(sp)
   10674:	e009883a 	mov	r4,fp
   10678:	e0c0032e 	bgeu	fp,r3,10688 <___vfprintf_internal_r+0x2cc>
   1067c:	e7000044 	addi	fp,fp,1
   10680:	21400005 	stb	r5,0(r4)
   10684:	e0bffa1e 	bne	fp,r2,10670 <_gp+0xffff4670>
   10688:	e6efc83a 	sub	r23,fp,sp
   1068c:	d8c00b17 	ldw	r3,44(sp)
   10690:	4dd1883a 	add	r8,r9,r23
   10694:	922dc83a 	sub	r22,r18,r8
   10698:	18001626 	beq	r3,zero,106f4 <___vfprintf_internal_r+0x338>
   1069c:	48000a26 	beq	r9,zero,106c8 <___vfprintf_internal_r+0x30c>
   106a0:	00800b44 	movi	r2,45
   106a4:	d8800805 	stb	r2,32(sp)
   106a8:	88800117 	ldw	r2,4(r17)
   106ac:	01c00044 	movi	r7,1
   106b0:	d9800804 	addi	r6,sp,32
   106b4:	880b883a 	mov	r5,r17
   106b8:	a009883a 	mov	r4,r20
   106bc:	103ee83a 	callr	r2
   106c0:	10004a1e 	bne	r2,zero,107ec <___vfprintf_internal_r+0x430>
   106c4:	84000044 	addi	r16,r16,1
   106c8:	0580070e 	bge	zero,r22,106e8 <___vfprintf_internal_r+0x32c>
   106cc:	b00f883a 	mov	r7,r22
   106d0:	01800c04 	movi	r6,48
   106d4:	880b883a 	mov	r5,r17
   106d8:	a009883a 	mov	r4,r20
   106dc:	00103500 	call	10350 <print_repeat>
   106e0:	1000421e 	bne	r2,zero,107ec <___vfprintf_internal_r+0x430>
   106e4:	85a1883a 	add	r16,r16,r22
   106e8:	e02d883a 	mov	r22,fp
   106ec:	bf2fc83a 	sub	r23,r23,fp
   106f0:	00002006 	br	10774 <___vfprintf_internal_r+0x3b8>
   106f4:	0580090e 	bge	zero,r22,1071c <___vfprintf_internal_r+0x360>
   106f8:	b00f883a 	mov	r7,r22
   106fc:	01800804 	movi	r6,32
   10700:	880b883a 	mov	r5,r17
   10704:	a009883a 	mov	r4,r20
   10708:	da401015 	stw	r9,64(sp)
   1070c:	00103500 	call	10350 <print_repeat>
   10710:	da401017 	ldw	r9,64(sp)
   10714:	1000351e 	bne	r2,zero,107ec <___vfprintf_internal_r+0x430>
   10718:	85a1883a 	add	r16,r16,r22
   1071c:	483ff226 	beq	r9,zero,106e8 <_gp+0xffff46e8>
   10720:	00800b44 	movi	r2,45
   10724:	d8800805 	stb	r2,32(sp)
   10728:	88800117 	ldw	r2,4(r17)
   1072c:	01c00044 	movi	r7,1
   10730:	d9800804 	addi	r6,sp,32
   10734:	880b883a 	mov	r5,r17
   10738:	a009883a 	mov	r4,r20
   1073c:	103ee83a 	callr	r2
   10740:	10002a1e 	bne	r2,zero,107ec <___vfprintf_internal_r+0x430>
   10744:	84000044 	addi	r16,r16,1
   10748:	003fe706 	br	106e8 <_gp+0xffff46e8>
   1074c:	b5bfffc4 	addi	r22,r22,-1
   10750:	b0800003 	ldbu	r2,0(r22)
   10754:	01c00044 	movi	r7,1
   10758:	d9800804 	addi	r6,sp,32
   1075c:	d8800805 	stb	r2,32(sp)
   10760:	88800117 	ldw	r2,4(r17)
   10764:	880b883a 	mov	r5,r17
   10768:	a009883a 	mov	r4,r20
   1076c:	103ee83a 	callr	r2
   10770:	10001e1e 	bne	r2,zero,107ec <___vfprintf_internal_r+0x430>
   10774:	8585c83a 	sub	r2,r16,r22
   10778:	b5c9883a 	add	r4,r22,r23
   1077c:	e085883a 	add	r2,fp,r2
   10780:	013ff216 	blt	zero,r4,1074c <_gp+0xffff474c>
   10784:	1021883a 	mov	r16,r2
   10788:	dd800d17 	ldw	r22,52(sp)
   1078c:	00004406 	br	108a0 <___vfprintf_internal_r+0x4e4>
   10790:	00800044 	movi	r2,1
   10794:	1480080e 	bge	r2,r18,107b8 <___vfprintf_internal_r+0x3fc>
   10798:	95ffffc4 	addi	r23,r18,-1
   1079c:	b80f883a 	mov	r7,r23
   107a0:	01800804 	movi	r6,32
   107a4:	880b883a 	mov	r5,r17
   107a8:	a009883a 	mov	r4,r20
   107ac:	00103500 	call	10350 <print_repeat>
   107b0:	10000e1e 	bne	r2,zero,107ec <___vfprintf_internal_r+0x430>
   107b4:	85e1883a 	add	r16,r16,r23
   107b8:	b0800017 	ldw	r2,0(r22)
   107bc:	01c00044 	movi	r7,1
   107c0:	d80d883a 	mov	r6,sp
   107c4:	d8800005 	stb	r2,0(sp)
   107c8:	88800117 	ldw	r2,4(r17)
   107cc:	880b883a 	mov	r5,r17
   107d0:	a009883a 	mov	r4,r20
   107d4:	b5c00104 	addi	r23,r22,4
   107d8:	103ee83a 	callr	r2
   107dc:	1000031e 	bne	r2,zero,107ec <___vfprintf_internal_r+0x430>
   107e0:	84000044 	addi	r16,r16,1
   107e4:	b82d883a 	mov	r22,r23
   107e8:	00002d06 	br	108a0 <___vfprintf_internal_r+0x4e4>
   107ec:	00bfffc4 	movi	r2,-1
   107f0:	00003106 	br	108b8 <___vfprintf_internal_r+0x4fc>
   107f4:	b5c00017 	ldw	r23,0(r22)
   107f8:	b7000104 	addi	fp,r22,4
   107fc:	b809883a 	mov	r4,r23
   10800:	00109bc0 	call	109bc <strlen>
   10804:	9091c83a 	sub	r8,r18,r2
   10808:	102d883a 	mov	r22,r2
   1080c:	0200090e 	bge	zero,r8,10834 <___vfprintf_internal_r+0x478>
   10810:	400f883a 	mov	r7,r8
   10814:	01800804 	movi	r6,32
   10818:	880b883a 	mov	r5,r17
   1081c:	a009883a 	mov	r4,r20
   10820:	da001015 	stw	r8,64(sp)
   10824:	00103500 	call	10350 <print_repeat>
   10828:	da001017 	ldw	r8,64(sp)
   1082c:	103fef1e 	bne	r2,zero,107ec <_gp+0xffff47ec>
   10830:	8221883a 	add	r16,r16,r8
   10834:	88800117 	ldw	r2,4(r17)
   10838:	b00f883a 	mov	r7,r22
   1083c:	b80d883a 	mov	r6,r23
   10840:	880b883a 	mov	r5,r17
   10844:	a009883a 	mov	r4,r20
   10848:	103ee83a 	callr	r2
   1084c:	103fe71e 	bne	r2,zero,107ec <_gp+0xffff47ec>
   10850:	85a1883a 	add	r16,r16,r22
   10854:	e02d883a 	mov	r22,fp
   10858:	00001106 	br	108a0 <___vfprintf_internal_r+0x4e4>
   1085c:	00c00044 	movi	r3,1
   10860:	04ffffc4 	movi	r19,-1
   10864:	d8000e15 	stw	zero,56(sp)
   10868:	d8c00a15 	stw	r3,40(sp)
   1086c:	05400284 	movi	r21,10
   10870:	9825883a 	mov	r18,r19
   10874:	d8000c15 	stw	zero,48(sp)
   10878:	d8000b15 	stw	zero,44(sp)
   1087c:	182f883a 	mov	r23,r3
   10880:	00000806 	br	108a4 <___vfprintf_internal_r+0x4e8>
   10884:	ddc00b15 	stw	r23,44(sp)
   10888:	05c00084 	movi	r23,2
   1088c:	00000506 	br	108a4 <___vfprintf_internal_r+0x4e8>
   10890:	00c00044 	movi	r3,1
   10894:	d8c00c15 	stw	r3,48(sp)
   10898:	05c000c4 	movi	r23,3
   1089c:	00000106 	br	108a4 <___vfprintf_internal_r+0x4e8>
   108a0:	002f883a 	mov	r23,zero
   108a4:	d8c00f17 	ldw	r3,60(sp)
   108a8:	18c00044 	addi	r3,r3,1
   108ac:	d8c00f15 	stw	r3,60(sp)
   108b0:	003edc06 	br	10424 <_gp+0xffff4424>
   108b4:	8005883a 	mov	r2,r16
   108b8:	dfc01a17 	ldw	ra,104(sp)
   108bc:	df001917 	ldw	fp,100(sp)
   108c0:	ddc01817 	ldw	r23,96(sp)
   108c4:	dd801717 	ldw	r22,92(sp)
   108c8:	dd401617 	ldw	r21,88(sp)
   108cc:	dd001517 	ldw	r20,84(sp)
   108d0:	dcc01417 	ldw	r19,80(sp)
   108d4:	dc801317 	ldw	r18,76(sp)
   108d8:	dc401217 	ldw	r17,72(sp)
   108dc:	dc001117 	ldw	r16,68(sp)
   108e0:	dec01b04 	addi	sp,sp,108
   108e4:	f800283a 	ret

000108e8 <__vfprintf_internal>:
   108e8:	00800074 	movhi	r2,1
   108ec:	10900104 	addi	r2,r2,16388
   108f0:	300f883a 	mov	r7,r6
   108f4:	280d883a 	mov	r6,r5
   108f8:	200b883a 	mov	r5,r4
   108fc:	11000017 	ldw	r4,0(r2)
   10900:	00103bc1 	jmpi	103bc <___vfprintf_internal_r>

00010904 <__sfvwrite_small_dev>:
   10904:	2880000b 	ldhu	r2,0(r5)
   10908:	1080020c 	andi	r2,r2,8
   1090c:	10002126 	beq	r2,zero,10994 <__sfvwrite_small_dev+0x90>
   10910:	2880008f 	ldh	r2,2(r5)
   10914:	defffa04 	addi	sp,sp,-24
   10918:	dc000015 	stw	r16,0(sp)
   1091c:	dfc00515 	stw	ra,20(sp)
   10920:	dd000415 	stw	r20,16(sp)
   10924:	dcc00315 	stw	r19,12(sp)
   10928:	dc800215 	stw	r18,8(sp)
   1092c:	dc400115 	stw	r17,4(sp)
   10930:	2821883a 	mov	r16,r5
   10934:	10001216 	blt	r2,zero,10980 <__sfvwrite_small_dev+0x7c>
   10938:	2027883a 	mov	r19,r4
   1093c:	3025883a 	mov	r18,r6
   10940:	3823883a 	mov	r17,r7
   10944:	05010004 	movi	r20,1024
   10948:	04400b0e 	bge	zero,r17,10978 <__sfvwrite_small_dev+0x74>
   1094c:	880f883a 	mov	r7,r17
   10950:	a440010e 	bge	r20,r17,10958 <__sfvwrite_small_dev+0x54>
   10954:	01c10004 	movi	r7,1024
   10958:	8140008f 	ldh	r5,2(r16)
   1095c:	900d883a 	mov	r6,r18
   10960:	9809883a 	mov	r4,r19
   10964:	00109d80 	call	109d8 <_write_r>
   10968:	0080050e 	bge	zero,r2,10980 <__sfvwrite_small_dev+0x7c>
   1096c:	88a3c83a 	sub	r17,r17,r2
   10970:	90a5883a 	add	r18,r18,r2
   10974:	003ff406 	br	10948 <_gp+0xffff4948>
   10978:	0005883a 	mov	r2,zero
   1097c:	00000706 	br	1099c <__sfvwrite_small_dev+0x98>
   10980:	8080000b 	ldhu	r2,0(r16)
   10984:	10801014 	ori	r2,r2,64
   10988:	8080000d 	sth	r2,0(r16)
   1098c:	00bfffc4 	movi	r2,-1
   10990:	00000206 	br	1099c <__sfvwrite_small_dev+0x98>
   10994:	00bfffc4 	movi	r2,-1
   10998:	f800283a 	ret
   1099c:	dfc00517 	ldw	ra,20(sp)
   109a0:	dd000417 	ldw	r20,16(sp)
   109a4:	dcc00317 	ldw	r19,12(sp)
   109a8:	dc800217 	ldw	r18,8(sp)
   109ac:	dc400117 	ldw	r17,4(sp)
   109b0:	dc000017 	ldw	r16,0(sp)
   109b4:	dec00604 	addi	sp,sp,24
   109b8:	f800283a 	ret

000109bc <strlen>:
   109bc:	2005883a 	mov	r2,r4
   109c0:	10c00007 	ldb	r3,0(r2)
   109c4:	18000226 	beq	r3,zero,109d0 <strlen+0x14>
   109c8:	10800044 	addi	r2,r2,1
   109cc:	003ffc06 	br	109c0 <_gp+0xffff49c0>
   109d0:	1105c83a 	sub	r2,r2,r4
   109d4:	f800283a 	ret

000109d8 <_write_r>:
   109d8:	defffd04 	addi	sp,sp,-12
   109dc:	dc000015 	stw	r16,0(sp)
   109e0:	04000074 	movhi	r16,1
   109e4:	dc400115 	stw	r17,4(sp)
   109e8:	8414d104 	addi	r16,r16,21316
   109ec:	2023883a 	mov	r17,r4
   109f0:	2809883a 	mov	r4,r5
   109f4:	300b883a 	mov	r5,r6
   109f8:	380d883a 	mov	r6,r7
   109fc:	dfc00215 	stw	ra,8(sp)
   10a00:	80000015 	stw	zero,0(r16)
   10a04:	0010dd00 	call	10dd0 <write>
   10a08:	00ffffc4 	movi	r3,-1
   10a0c:	10c0031e 	bne	r2,r3,10a1c <_write_r+0x44>
   10a10:	80c00017 	ldw	r3,0(r16)
   10a14:	18000126 	beq	r3,zero,10a1c <_write_r+0x44>
   10a18:	88c00015 	stw	r3,0(r17)
   10a1c:	dfc00217 	ldw	ra,8(sp)
   10a20:	dc400117 	ldw	r17,4(sp)
   10a24:	dc000017 	ldw	r16,0(sp)
   10a28:	dec00304 	addi	sp,sp,12
   10a2c:	f800283a 	ret

00010a30 <__divsi3>:
   10a30:	20001b16 	blt	r4,zero,10aa0 <__divsi3+0x70>
   10a34:	000f883a 	mov	r7,zero
   10a38:	28001616 	blt	r5,zero,10a94 <__divsi3+0x64>
   10a3c:	200d883a 	mov	r6,r4
   10a40:	29001a2e 	bgeu	r5,r4,10aac <__divsi3+0x7c>
   10a44:	00800804 	movi	r2,32
   10a48:	00c00044 	movi	r3,1
   10a4c:	00000106 	br	10a54 <__divsi3+0x24>
   10a50:	10000d26 	beq	r2,zero,10a88 <__divsi3+0x58>
   10a54:	294b883a 	add	r5,r5,r5
   10a58:	10bfffc4 	addi	r2,r2,-1
   10a5c:	18c7883a 	add	r3,r3,r3
   10a60:	293ffb36 	bltu	r5,r4,10a50 <_gp+0xffff4a50>
   10a64:	0005883a 	mov	r2,zero
   10a68:	18000726 	beq	r3,zero,10a88 <__divsi3+0x58>
   10a6c:	0005883a 	mov	r2,zero
   10a70:	31400236 	bltu	r6,r5,10a7c <__divsi3+0x4c>
   10a74:	314dc83a 	sub	r6,r6,r5
   10a78:	10c4b03a 	or	r2,r2,r3
   10a7c:	1806d07a 	srli	r3,r3,1
   10a80:	280ad07a 	srli	r5,r5,1
   10a84:	183ffa1e 	bne	r3,zero,10a70 <_gp+0xffff4a70>
   10a88:	38000126 	beq	r7,zero,10a90 <__divsi3+0x60>
   10a8c:	0085c83a 	sub	r2,zero,r2
   10a90:	f800283a 	ret
   10a94:	014bc83a 	sub	r5,zero,r5
   10a98:	39c0005c 	xori	r7,r7,1
   10a9c:	003fe706 	br	10a3c <_gp+0xffff4a3c>
   10aa0:	0109c83a 	sub	r4,zero,r4
   10aa4:	01c00044 	movi	r7,1
   10aa8:	003fe306 	br	10a38 <_gp+0xffff4a38>
   10aac:	00c00044 	movi	r3,1
   10ab0:	003fee06 	br	10a6c <_gp+0xffff4a6c>

00010ab4 <__modsi3>:
   10ab4:	20001716 	blt	r4,zero,10b14 <__modsi3+0x60>
   10ab8:	000f883a 	mov	r7,zero
   10abc:	2005883a 	mov	r2,r4
   10ac0:	28001216 	blt	r5,zero,10b0c <__modsi3+0x58>
   10ac4:	2900162e 	bgeu	r5,r4,10b20 <__modsi3+0x6c>
   10ac8:	01800804 	movi	r6,32
   10acc:	00c00044 	movi	r3,1
   10ad0:	00000106 	br	10ad8 <__modsi3+0x24>
   10ad4:	30000a26 	beq	r6,zero,10b00 <__modsi3+0x4c>
   10ad8:	294b883a 	add	r5,r5,r5
   10adc:	31bfffc4 	addi	r6,r6,-1
   10ae0:	18c7883a 	add	r3,r3,r3
   10ae4:	293ffb36 	bltu	r5,r4,10ad4 <_gp+0xffff4ad4>
   10ae8:	18000526 	beq	r3,zero,10b00 <__modsi3+0x4c>
   10aec:	1806d07a 	srli	r3,r3,1
   10af0:	11400136 	bltu	r2,r5,10af8 <__modsi3+0x44>
   10af4:	1145c83a 	sub	r2,r2,r5
   10af8:	280ad07a 	srli	r5,r5,1
   10afc:	183ffb1e 	bne	r3,zero,10aec <_gp+0xffff4aec>
   10b00:	38000126 	beq	r7,zero,10b08 <__modsi3+0x54>
   10b04:	0085c83a 	sub	r2,zero,r2
   10b08:	f800283a 	ret
   10b0c:	014bc83a 	sub	r5,zero,r5
   10b10:	003fec06 	br	10ac4 <_gp+0xffff4ac4>
   10b14:	0109c83a 	sub	r4,zero,r4
   10b18:	01c00044 	movi	r7,1
   10b1c:	003fe706 	br	10abc <_gp+0xffff4abc>
   10b20:	00c00044 	movi	r3,1
   10b24:	003ff106 	br	10aec <_gp+0xffff4aec>

00010b28 <__udivsi3>:
   10b28:	200d883a 	mov	r6,r4
   10b2c:	2900152e 	bgeu	r5,r4,10b84 <__udivsi3+0x5c>
   10b30:	28001416 	blt	r5,zero,10b84 <__udivsi3+0x5c>
   10b34:	00800804 	movi	r2,32
   10b38:	00c00044 	movi	r3,1
   10b3c:	00000206 	br	10b48 <__udivsi3+0x20>
   10b40:	10000e26 	beq	r2,zero,10b7c <__udivsi3+0x54>
   10b44:	28000516 	blt	r5,zero,10b5c <__udivsi3+0x34>
   10b48:	294b883a 	add	r5,r5,r5
   10b4c:	10bfffc4 	addi	r2,r2,-1
   10b50:	18c7883a 	add	r3,r3,r3
   10b54:	293ffa36 	bltu	r5,r4,10b40 <_gp+0xffff4b40>
   10b58:	18000826 	beq	r3,zero,10b7c <__udivsi3+0x54>
   10b5c:	0005883a 	mov	r2,zero
   10b60:	31400236 	bltu	r6,r5,10b6c <__udivsi3+0x44>
   10b64:	314dc83a 	sub	r6,r6,r5
   10b68:	10c4b03a 	or	r2,r2,r3
   10b6c:	1806d07a 	srli	r3,r3,1
   10b70:	280ad07a 	srli	r5,r5,1
   10b74:	183ffa1e 	bne	r3,zero,10b60 <_gp+0xffff4b60>
   10b78:	f800283a 	ret
   10b7c:	0005883a 	mov	r2,zero
   10b80:	f800283a 	ret
   10b84:	00c00044 	movi	r3,1
   10b88:	003ff406 	br	10b5c <_gp+0xffff4b5c>

00010b8c <__umodsi3>:
   10b8c:	2005883a 	mov	r2,r4
   10b90:	2900122e 	bgeu	r5,r4,10bdc <__umodsi3+0x50>
   10b94:	28001116 	blt	r5,zero,10bdc <__umodsi3+0x50>
   10b98:	01800804 	movi	r6,32
   10b9c:	00c00044 	movi	r3,1
   10ba0:	00000206 	br	10bac <__umodsi3+0x20>
   10ba4:	30000c26 	beq	r6,zero,10bd8 <__umodsi3+0x4c>
   10ba8:	28000516 	blt	r5,zero,10bc0 <__umodsi3+0x34>
   10bac:	294b883a 	add	r5,r5,r5
   10bb0:	31bfffc4 	addi	r6,r6,-1
   10bb4:	18c7883a 	add	r3,r3,r3
   10bb8:	293ffa36 	bltu	r5,r4,10ba4 <_gp+0xffff4ba4>
   10bbc:	18000626 	beq	r3,zero,10bd8 <__umodsi3+0x4c>
   10bc0:	1806d07a 	srli	r3,r3,1
   10bc4:	11400136 	bltu	r2,r5,10bcc <__umodsi3+0x40>
   10bc8:	1145c83a 	sub	r2,r2,r5
   10bcc:	280ad07a 	srli	r5,r5,1
   10bd0:	183ffb1e 	bne	r3,zero,10bc0 <_gp+0xffff4bc0>
   10bd4:	f800283a 	ret
   10bd8:	f800283a 	ret
   10bdc:	00c00044 	movi	r3,1
   10be0:	003ff706 	br	10bc0 <_gp+0xffff4bc0>

00010be4 <__mulsi3>:
   10be4:	0005883a 	mov	r2,zero
   10be8:	20000726 	beq	r4,zero,10c08 <__mulsi3+0x24>
   10bec:	20c0004c 	andi	r3,r4,1
   10bf0:	2008d07a 	srli	r4,r4,1
   10bf4:	18000126 	beq	r3,zero,10bfc <__mulsi3+0x18>
   10bf8:	1145883a 	add	r2,r2,r5
   10bfc:	294b883a 	add	r5,r5,r5
   10c00:	203ffa1e 	bne	r4,zero,10bec <_gp+0xffff4bec>
   10c04:	f800283a 	ret
   10c08:	f800283a 	ret

00010c0c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10c0c:	defffc04 	addi	sp,sp,-16
   10c10:	df000315 	stw	fp,12(sp)
   10c14:	df000304 	addi	fp,sp,12
   10c18:	e13ffd15 	stw	r4,-12(fp)
   10c1c:	e17ffe15 	stw	r5,-8(fp)
   10c20:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10c24:	e0fffe17 	ldw	r3,-8(fp)
   10c28:	e0bffd17 	ldw	r2,-12(fp)
   10c2c:	18800c26 	beq	r3,r2,10c60 <alt_load_section+0x54>
  {
    while( to != end )
   10c30:	00000806 	br	10c54 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10c34:	e0bffe17 	ldw	r2,-8(fp)
   10c38:	10c00104 	addi	r3,r2,4
   10c3c:	e0fffe15 	stw	r3,-8(fp)
   10c40:	e0fffd17 	ldw	r3,-12(fp)
   10c44:	19000104 	addi	r4,r3,4
   10c48:	e13ffd15 	stw	r4,-12(fp)
   10c4c:	18c00017 	ldw	r3,0(r3)
   10c50:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10c54:	e0fffe17 	ldw	r3,-8(fp)
   10c58:	e0bfff17 	ldw	r2,-4(fp)
   10c5c:	18bff51e 	bne	r3,r2,10c34 <_gp+0xffff4c34>
    {
      *to++ = *from++;
    }
  }
}
   10c60:	0001883a 	nop
   10c64:	e037883a 	mov	sp,fp
   10c68:	df000017 	ldw	fp,0(sp)
   10c6c:	dec00104 	addi	sp,sp,4
   10c70:	f800283a 	ret

00010c74 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10c74:	defffe04 	addi	sp,sp,-8
   10c78:	dfc00115 	stw	ra,4(sp)
   10c7c:	df000015 	stw	fp,0(sp)
   10c80:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10c84:	01800074 	movhi	r6,1
   10c88:	31900b04 	addi	r6,r6,16428
   10c8c:	01400074 	movhi	r5,1
   10c90:	294b4604 	addi	r5,r5,11544
   10c94:	01000074 	movhi	r4,1
   10c98:	21100b04 	addi	r4,r4,16428
   10c9c:	0010c0c0 	call	10c0c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10ca0:	01800074 	movhi	r6,1
   10ca4:	31808c04 	addi	r6,r6,560
   10ca8:	01400074 	movhi	r5,1
   10cac:	29400804 	addi	r5,r5,32
   10cb0:	01000074 	movhi	r4,1
   10cb4:	21000804 	addi	r4,r4,32
   10cb8:	0010c0c0 	call	10c0c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10cbc:	01800074 	movhi	r6,1
   10cc0:	318b4604 	addi	r6,r6,11544
   10cc4:	01400074 	movhi	r5,1
   10cc8:	294b3604 	addi	r5,r5,11480
   10ccc:	01000074 	movhi	r4,1
   10cd0:	210b3604 	addi	r4,r4,11480
   10cd4:	0010c0c0 	call	10c0c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10cd8:	0011d880 	call	11d88 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10cdc:	0011eb40 	call	11eb4 <alt_icache_flush_all>
}
   10ce0:	0001883a 	nop
   10ce4:	e037883a 	mov	sp,fp
   10ce8:	dfc00117 	ldw	ra,4(sp)
   10cec:	df000017 	ldw	fp,0(sp)
   10cf0:	dec00204 	addi	sp,sp,8
   10cf4:	f800283a 	ret

00010cf8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10cf8:	defffd04 	addi	sp,sp,-12
   10cfc:	dfc00215 	stw	ra,8(sp)
   10d00:	df000115 	stw	fp,4(sp)
   10d04:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10d08:	0009883a 	mov	r4,zero
   10d0c:	0010f040 	call	10f04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10d10:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10d14:	0010f3c0 	call	10f3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10d18:	01800074 	movhi	r6,1
   10d1c:	318b3904 	addi	r6,r6,11492
   10d20:	01400074 	movhi	r5,1
   10d24:	294b3904 	addi	r5,r5,11492
   10d28:	01000074 	movhi	r4,1
   10d2c:	210b3904 	addi	r4,r4,11492
   10d30:	00122580 	call	12258 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10d34:	d0a4d217 	ldw	r2,-27832(gp)
   10d38:	d0e4d317 	ldw	r3,-27828(gp)
   10d3c:	d124d417 	ldw	r4,-27824(gp)
   10d40:	200d883a 	mov	r6,r4
   10d44:	180b883a 	mov	r5,r3
   10d48:	1009883a 	mov	r4,r2
   10d4c:	001026c0 	call	1026c <main>
   10d50:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10d54:	01000044 	movi	r4,1
   10d58:	0011cb00 	call	11cb0 <close>
  exit (result);
   10d5c:	e13fff17 	ldw	r4,-4(fp)
   10d60:	0012a9c0 	call	12a9c <exit>

00010d64 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   10d64:	defffd04 	addi	sp,sp,-12
   10d68:	dfc00215 	stw	ra,8(sp)
   10d6c:	df000115 	stw	fp,4(sp)
   10d70:	df000104 	addi	fp,sp,4
   10d74:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   10d78:	e13fff17 	ldw	r4,-4(fp)
   10d7c:	0011b1c0 	call	11b1c <alt_busy_sleep>
}
   10d80:	e037883a 	mov	sp,fp
   10d84:	dfc00117 	ldw	ra,4(sp)
   10d88:	df000017 	ldw	fp,0(sp)
   10d8c:	dec00204 	addi	sp,sp,8
   10d90:	f800283a 	ret

00010d94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10d94:	defffe04 	addi	sp,sp,-8
   10d98:	dfc00115 	stw	ra,4(sp)
   10d9c:	df000015 	stw	fp,0(sp)
   10da0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10da4:	d0a00717 	ldw	r2,-32740(gp)
   10da8:	10000326 	beq	r2,zero,10db8 <alt_get_errno+0x24>
   10dac:	d0a00717 	ldw	r2,-32740(gp)
   10db0:	103ee83a 	callr	r2
   10db4:	00000106 	br	10dbc <alt_get_errno+0x28>
   10db8:	d0a4d104 	addi	r2,gp,-27836
}
   10dbc:	e037883a 	mov	sp,fp
   10dc0:	dfc00117 	ldw	ra,4(sp)
   10dc4:	df000017 	ldw	fp,0(sp)
   10dc8:	dec00204 	addi	sp,sp,8
   10dcc:	f800283a 	ret

00010dd0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10dd0:	defff904 	addi	sp,sp,-28
   10dd4:	dfc00615 	stw	ra,24(sp)
   10dd8:	df000515 	stw	fp,20(sp)
   10ddc:	df000504 	addi	fp,sp,20
   10de0:	e13ffd15 	stw	r4,-12(fp)
   10de4:	e17ffe15 	stw	r5,-8(fp)
   10de8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10dec:	e0bffd17 	ldw	r2,-12(fp)
   10df0:	10000816 	blt	r2,zero,10e14 <write+0x44>
   10df4:	01400304 	movi	r5,12
   10df8:	e13ffd17 	ldw	r4,-12(fp)
   10dfc:	0010be40 	call	10be4 <__mulsi3>
   10e00:	1007883a 	mov	r3,r2
   10e04:	00800074 	movhi	r2,1
   10e08:	108fa004 	addi	r2,r2,16000
   10e0c:	1885883a 	add	r2,r3,r2
   10e10:	00000106 	br	10e18 <write+0x48>
   10e14:	0005883a 	mov	r2,zero
   10e18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10e1c:	e0bffb17 	ldw	r2,-20(fp)
   10e20:	10002126 	beq	r2,zero,10ea8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10e24:	e0bffb17 	ldw	r2,-20(fp)
   10e28:	10800217 	ldw	r2,8(r2)
   10e2c:	108000cc 	andi	r2,r2,3
   10e30:	10001826 	beq	r2,zero,10e94 <write+0xc4>
   10e34:	e0bffb17 	ldw	r2,-20(fp)
   10e38:	10800017 	ldw	r2,0(r2)
   10e3c:	10800617 	ldw	r2,24(r2)
   10e40:	10001426 	beq	r2,zero,10e94 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10e44:	e0bffb17 	ldw	r2,-20(fp)
   10e48:	10800017 	ldw	r2,0(r2)
   10e4c:	10800617 	ldw	r2,24(r2)
   10e50:	e0ffff17 	ldw	r3,-4(fp)
   10e54:	180d883a 	mov	r6,r3
   10e58:	e17ffe17 	ldw	r5,-8(fp)
   10e5c:	e13ffb17 	ldw	r4,-20(fp)
   10e60:	103ee83a 	callr	r2
   10e64:	e0bffc15 	stw	r2,-16(fp)
   10e68:	e0bffc17 	ldw	r2,-16(fp)
   10e6c:	1000070e 	bge	r2,zero,10e8c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   10e70:	0010d940 	call	10d94 <alt_get_errno>
   10e74:	1007883a 	mov	r3,r2
   10e78:	e0bffc17 	ldw	r2,-16(fp)
   10e7c:	0085c83a 	sub	r2,zero,r2
   10e80:	18800015 	stw	r2,0(r3)
        return -1;
   10e84:	00bfffc4 	movi	r2,-1
   10e88:	00000c06 	br	10ebc <write+0xec>
      }
      return rval;
   10e8c:	e0bffc17 	ldw	r2,-16(fp)
   10e90:	00000a06 	br	10ebc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10e94:	0010d940 	call	10d94 <alt_get_errno>
   10e98:	1007883a 	mov	r3,r2
   10e9c:	00800344 	movi	r2,13
   10ea0:	18800015 	stw	r2,0(r3)
   10ea4:	00000406 	br	10eb8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10ea8:	0010d940 	call	10d94 <alt_get_errno>
   10eac:	1007883a 	mov	r3,r2
   10eb0:	00801444 	movi	r2,81
   10eb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10eb8:	00bfffc4 	movi	r2,-1
}
   10ebc:	e037883a 	mov	sp,fp
   10ec0:	dfc00117 	ldw	ra,4(sp)
   10ec4:	df000017 	ldw	fp,0(sp)
   10ec8:	dec00204 	addi	sp,sp,8
   10ecc:	f800283a 	ret

00010ed0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10ed0:	defffd04 	addi	sp,sp,-12
   10ed4:	dfc00215 	stw	ra,8(sp)
   10ed8:	df000115 	stw	fp,4(sp)
   10edc:	df000104 	addi	fp,sp,4
   10ee0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10ee4:	d1600404 	addi	r5,gp,-32752
   10ee8:	e13fff17 	ldw	r4,-4(fp)
   10eec:	0011e100 	call	11e10 <alt_dev_llist_insert>
}
   10ef0:	e037883a 	mov	sp,fp
   10ef4:	dfc00117 	ldw	ra,4(sp)
   10ef8:	df000017 	ldw	fp,0(sp)
   10efc:	dec00204 	addi	sp,sp,8
   10f00:	f800283a 	ret

00010f04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10f04:	defffd04 	addi	sp,sp,-12
   10f08:	dfc00215 	stw	ra,8(sp)
   10f0c:	df000115 	stw	fp,4(sp)
   10f10:	df000104 	addi	fp,sp,4
   10f14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   10f18:	00127800 	call	12780 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10f1c:	00800044 	movi	r2,1
   10f20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10f24:	0001883a 	nop
   10f28:	e037883a 	mov	sp,fp
   10f2c:	dfc00117 	ldw	ra,4(sp)
   10f30:	df000017 	ldw	fp,0(sp)
   10f34:	dec00204 	addi	sp,sp,8
   10f38:	f800283a 	ret

00010f3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10f3c:	defffe04 	addi	sp,sp,-8
   10f40:	dfc00115 	stw	ra,4(sp)
   10f44:	df000015 	stw	fp,0(sp)
   10f48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10f4c:	000d883a 	mov	r6,zero
   10f50:	000b883a 	mov	r5,zero
   10f54:	01000074 	movhi	r4,1
   10f58:	210b8804 	addi	r4,r4,11808
   10f5c:	00110ec0 	call	110ec <altera_avalon_jtag_uart_init>
   10f60:	01000074 	movhi	r4,1
   10f64:	210b7e04 	addi	r4,r4,11768
   10f68:	0010ed00 	call	10ed0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   10f6c:	0001883a 	nop
}
   10f70:	0001883a 	nop
   10f74:	e037883a 	mov	sp,fp
   10f78:	dfc00117 	ldw	ra,4(sp)
   10f7c:	df000017 	ldw	fp,0(sp)
   10f80:	dec00204 	addi	sp,sp,8
   10f84:	f800283a 	ret

00010f88 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10f88:	defffa04 	addi	sp,sp,-24
   10f8c:	dfc00515 	stw	ra,20(sp)
   10f90:	df000415 	stw	fp,16(sp)
   10f94:	df000404 	addi	fp,sp,16
   10f98:	e13ffd15 	stw	r4,-12(fp)
   10f9c:	e17ffe15 	stw	r5,-8(fp)
   10fa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10fa4:	e0bffd17 	ldw	r2,-12(fp)
   10fa8:	10800017 	ldw	r2,0(r2)
   10fac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10fb0:	e0bffc17 	ldw	r2,-16(fp)
   10fb4:	10c00a04 	addi	r3,r2,40
   10fb8:	e0bffd17 	ldw	r2,-12(fp)
   10fbc:	10800217 	ldw	r2,8(r2)
   10fc0:	100f883a 	mov	r7,r2
   10fc4:	e1bfff17 	ldw	r6,-4(fp)
   10fc8:	e17ffe17 	ldw	r5,-8(fp)
   10fcc:	1809883a 	mov	r4,r3
   10fd0:	00115b00 	call	115b0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10fd4:	e037883a 	mov	sp,fp
   10fd8:	dfc00117 	ldw	ra,4(sp)
   10fdc:	df000017 	ldw	fp,0(sp)
   10fe0:	dec00204 	addi	sp,sp,8
   10fe4:	f800283a 	ret

00010fe8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10fe8:	defffa04 	addi	sp,sp,-24
   10fec:	dfc00515 	stw	ra,20(sp)
   10ff0:	df000415 	stw	fp,16(sp)
   10ff4:	df000404 	addi	fp,sp,16
   10ff8:	e13ffd15 	stw	r4,-12(fp)
   10ffc:	e17ffe15 	stw	r5,-8(fp)
   11000:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11004:	e0bffd17 	ldw	r2,-12(fp)
   11008:	10800017 	ldw	r2,0(r2)
   1100c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   11010:	e0bffc17 	ldw	r2,-16(fp)
   11014:	10c00a04 	addi	r3,r2,40
   11018:	e0bffd17 	ldw	r2,-12(fp)
   1101c:	10800217 	ldw	r2,8(r2)
   11020:	100f883a 	mov	r7,r2
   11024:	e1bfff17 	ldw	r6,-4(fp)
   11028:	e17ffe17 	ldw	r5,-8(fp)
   1102c:	1809883a 	mov	r4,r3
   11030:	00117cc0 	call	117cc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   11034:	e037883a 	mov	sp,fp
   11038:	dfc00117 	ldw	ra,4(sp)
   1103c:	df000017 	ldw	fp,0(sp)
   11040:	dec00204 	addi	sp,sp,8
   11044:	f800283a 	ret

00011048 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11048:	defffc04 	addi	sp,sp,-16
   1104c:	dfc00315 	stw	ra,12(sp)
   11050:	df000215 	stw	fp,8(sp)
   11054:	df000204 	addi	fp,sp,8
   11058:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1105c:	e0bfff17 	ldw	r2,-4(fp)
   11060:	10800017 	ldw	r2,0(r2)
   11064:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11068:	e0bffe17 	ldw	r2,-8(fp)
   1106c:	10c00a04 	addi	r3,r2,40
   11070:	e0bfff17 	ldw	r2,-4(fp)
   11074:	10800217 	ldw	r2,8(r2)
   11078:	100b883a 	mov	r5,r2
   1107c:	1809883a 	mov	r4,r3
   11080:	00114580 	call	11458 <altera_avalon_jtag_uart_close>
}
   11084:	e037883a 	mov	sp,fp
   11088:	dfc00117 	ldw	ra,4(sp)
   1108c:	df000017 	ldw	fp,0(sp)
   11090:	dec00204 	addi	sp,sp,8
   11094:	f800283a 	ret

00011098 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   11098:	defffa04 	addi	sp,sp,-24
   1109c:	dfc00515 	stw	ra,20(sp)
   110a0:	df000415 	stw	fp,16(sp)
   110a4:	df000404 	addi	fp,sp,16
   110a8:	e13ffd15 	stw	r4,-12(fp)
   110ac:	e17ffe15 	stw	r5,-8(fp)
   110b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   110b4:	e0bffd17 	ldw	r2,-12(fp)
   110b8:	10800017 	ldw	r2,0(r2)
   110bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   110c0:	e0bffc17 	ldw	r2,-16(fp)
   110c4:	10800a04 	addi	r2,r2,40
   110c8:	e1bfff17 	ldw	r6,-4(fp)
   110cc:	e17ffe17 	ldw	r5,-8(fp)
   110d0:	1009883a 	mov	r4,r2
   110d4:	00114c00 	call	114c0 <altera_avalon_jtag_uart_ioctl>
}
   110d8:	e037883a 	mov	sp,fp
   110dc:	dfc00117 	ldw	ra,4(sp)
   110e0:	df000017 	ldw	fp,0(sp)
   110e4:	dec00204 	addi	sp,sp,8
   110e8:	f800283a 	ret

000110ec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   110ec:	defffa04 	addi	sp,sp,-24
   110f0:	dfc00515 	stw	ra,20(sp)
   110f4:	df000415 	stw	fp,16(sp)
   110f8:	df000404 	addi	fp,sp,16
   110fc:	e13ffd15 	stw	r4,-12(fp)
   11100:	e17ffe15 	stw	r5,-8(fp)
   11104:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11108:	e0bffd17 	ldw	r2,-12(fp)
   1110c:	00c00044 	movi	r3,1
   11110:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   11114:	e0bffd17 	ldw	r2,-12(fp)
   11118:	10800017 	ldw	r2,0(r2)
   1111c:	10800104 	addi	r2,r2,4
   11120:	1007883a 	mov	r3,r2
   11124:	e0bffd17 	ldw	r2,-12(fp)
   11128:	10800817 	ldw	r2,32(r2)
   1112c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   11130:	e0bffe17 	ldw	r2,-8(fp)
   11134:	e0ffff17 	ldw	r3,-4(fp)
   11138:	d8000015 	stw	zero,0(sp)
   1113c:	e1fffd17 	ldw	r7,-12(fp)
   11140:	01800074 	movhi	r6,1
   11144:	31846b04 	addi	r6,r6,4524
   11148:	180b883a 	mov	r5,r3
   1114c:	1009883a 	mov	r4,r2
   11150:	0011ed40 	call	11ed4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   11154:	e0bffd17 	ldw	r2,-12(fp)
   11158:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1115c:	e0bffd17 	ldw	r2,-12(fp)
   11160:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11164:	d0e4d617 	ldw	r3,-27816(gp)
   11168:	e1fffd17 	ldw	r7,-12(fp)
   1116c:	01800074 	movhi	r6,1
   11170:	3184ee04 	addi	r6,r6,5048
   11174:	180b883a 	mov	r5,r3
   11178:	1009883a 	mov	r4,r2
   1117c:	00119f00 	call	119f0 <alt_alarm_start>
   11180:	1000040e 	bge	r2,zero,11194 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   11184:	e0fffd17 	ldw	r3,-12(fp)
   11188:	00a00034 	movhi	r2,32768
   1118c:	10bfffc4 	addi	r2,r2,-1
   11190:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   11194:	0001883a 	nop
   11198:	e037883a 	mov	sp,fp
   1119c:	dfc00117 	ldw	ra,4(sp)
   111a0:	df000017 	ldw	fp,0(sp)
   111a4:	dec00204 	addi	sp,sp,8
   111a8:	f800283a 	ret

000111ac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   111ac:	defff804 	addi	sp,sp,-32
   111b0:	df000715 	stw	fp,28(sp)
   111b4:	df000704 	addi	fp,sp,28
   111b8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   111bc:	e0bfff17 	ldw	r2,-4(fp)
   111c0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   111c4:	e0bffb17 	ldw	r2,-20(fp)
   111c8:	10800017 	ldw	r2,0(r2)
   111cc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   111d0:	e0bffc17 	ldw	r2,-16(fp)
   111d4:	10800104 	addi	r2,r2,4
   111d8:	10800037 	ldwio	r2,0(r2)
   111dc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   111e0:	e0bffd17 	ldw	r2,-12(fp)
   111e4:	1080c00c 	andi	r2,r2,768
   111e8:	10006d26 	beq	r2,zero,113a0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   111ec:	e0bffd17 	ldw	r2,-12(fp)
   111f0:	1080400c 	andi	r2,r2,256
   111f4:	10003526 	beq	r2,zero,112cc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   111f8:	00800074 	movhi	r2,1
   111fc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11200:	e0bffb17 	ldw	r2,-20(fp)
   11204:	10800a17 	ldw	r2,40(r2)
   11208:	10800044 	addi	r2,r2,1
   1120c:	1081ffcc 	andi	r2,r2,2047
   11210:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   11214:	e0bffb17 	ldw	r2,-20(fp)
   11218:	10c00b17 	ldw	r3,44(r2)
   1121c:	e0bffe17 	ldw	r2,-8(fp)
   11220:	18801526 	beq	r3,r2,11278 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11224:	e0bffc17 	ldw	r2,-16(fp)
   11228:	10800037 	ldwio	r2,0(r2)
   1122c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   11230:	e0bff917 	ldw	r2,-28(fp)
   11234:	10a0000c 	andi	r2,r2,32768
   11238:	10001126 	beq	r2,zero,11280 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1123c:	e0bffb17 	ldw	r2,-20(fp)
   11240:	10800a17 	ldw	r2,40(r2)
   11244:	e0fff917 	ldw	r3,-28(fp)
   11248:	1809883a 	mov	r4,r3
   1124c:	e0fffb17 	ldw	r3,-20(fp)
   11250:	1885883a 	add	r2,r3,r2
   11254:	10800e04 	addi	r2,r2,56
   11258:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1125c:	e0bffb17 	ldw	r2,-20(fp)
   11260:	10800a17 	ldw	r2,40(r2)
   11264:	10800044 	addi	r2,r2,1
   11268:	10c1ffcc 	andi	r3,r2,2047
   1126c:	e0bffb17 	ldw	r2,-20(fp)
   11270:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   11274:	003fe206 	br	11200 <_gp+0xffff5200>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   11278:	0001883a 	nop
   1127c:	00000106 	br	11284 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   11280:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   11284:	e0bff917 	ldw	r2,-28(fp)
   11288:	10bfffec 	andhi	r2,r2,65535
   1128c:	10000f26 	beq	r2,zero,112cc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11290:	e0bffb17 	ldw	r2,-20(fp)
   11294:	10c00817 	ldw	r3,32(r2)
   11298:	00bfff84 	movi	r2,-2
   1129c:	1886703a 	and	r3,r3,r2
   112a0:	e0bffb17 	ldw	r2,-20(fp)
   112a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   112a8:	e0bffc17 	ldw	r2,-16(fp)
   112ac:	10800104 	addi	r2,r2,4
   112b0:	1007883a 	mov	r3,r2
   112b4:	e0bffb17 	ldw	r2,-20(fp)
   112b8:	10800817 	ldw	r2,32(r2)
   112bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   112c0:	e0bffc17 	ldw	r2,-16(fp)
   112c4:	10800104 	addi	r2,r2,4
   112c8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   112cc:	e0bffd17 	ldw	r2,-12(fp)
   112d0:	1080800c 	andi	r2,r2,512
   112d4:	103fbe26 	beq	r2,zero,111d0 <_gp+0xffff51d0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   112d8:	e0bffd17 	ldw	r2,-12(fp)
   112dc:	1004d43a 	srli	r2,r2,16
   112e0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   112e4:	00001406 	br	11338 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   112e8:	e0bffc17 	ldw	r2,-16(fp)
   112ec:	e0fffb17 	ldw	r3,-20(fp)
   112f0:	18c00d17 	ldw	r3,52(r3)
   112f4:	e13ffb17 	ldw	r4,-20(fp)
   112f8:	20c7883a 	add	r3,r4,r3
   112fc:	18c20e04 	addi	r3,r3,2104
   11300:	18c00003 	ldbu	r3,0(r3)
   11304:	18c03fcc 	andi	r3,r3,255
   11308:	18c0201c 	xori	r3,r3,128
   1130c:	18ffe004 	addi	r3,r3,-128
   11310:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11314:	e0bffb17 	ldw	r2,-20(fp)
   11318:	10800d17 	ldw	r2,52(r2)
   1131c:	10800044 	addi	r2,r2,1
   11320:	10c1ffcc 	andi	r3,r2,2047
   11324:	e0bffb17 	ldw	r2,-20(fp)
   11328:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1132c:	e0bffa17 	ldw	r2,-24(fp)
   11330:	10bfffc4 	addi	r2,r2,-1
   11334:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   11338:	e0bffa17 	ldw	r2,-24(fp)
   1133c:	10000526 	beq	r2,zero,11354 <altera_avalon_jtag_uart_irq+0x1a8>
   11340:	e0bffb17 	ldw	r2,-20(fp)
   11344:	10c00d17 	ldw	r3,52(r2)
   11348:	e0bffb17 	ldw	r2,-20(fp)
   1134c:	10800c17 	ldw	r2,48(r2)
   11350:	18bfe51e 	bne	r3,r2,112e8 <_gp+0xffff52e8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   11354:	e0bffa17 	ldw	r2,-24(fp)
   11358:	103f9d26 	beq	r2,zero,111d0 <_gp+0xffff51d0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1135c:	e0bffb17 	ldw	r2,-20(fp)
   11360:	10c00817 	ldw	r3,32(r2)
   11364:	00bfff44 	movi	r2,-3
   11368:	1886703a 	and	r3,r3,r2
   1136c:	e0bffb17 	ldw	r2,-20(fp)
   11370:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11374:	e0bffb17 	ldw	r2,-20(fp)
   11378:	10800017 	ldw	r2,0(r2)
   1137c:	10800104 	addi	r2,r2,4
   11380:	1007883a 	mov	r3,r2
   11384:	e0bffb17 	ldw	r2,-20(fp)
   11388:	10800817 	ldw	r2,32(r2)
   1138c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11390:	e0bffc17 	ldw	r2,-16(fp)
   11394:	10800104 	addi	r2,r2,4
   11398:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1139c:	003f8c06 	br	111d0 <_gp+0xffff51d0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   113a0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   113a4:	0001883a 	nop
   113a8:	e037883a 	mov	sp,fp
   113ac:	df000017 	ldw	fp,0(sp)
   113b0:	dec00104 	addi	sp,sp,4
   113b4:	f800283a 	ret

000113b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   113b8:	defff804 	addi	sp,sp,-32
   113bc:	df000715 	stw	fp,28(sp)
   113c0:	df000704 	addi	fp,sp,28
   113c4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   113c8:	e0bffb17 	ldw	r2,-20(fp)
   113cc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   113d0:	e0bff917 	ldw	r2,-28(fp)
   113d4:	10800017 	ldw	r2,0(r2)
   113d8:	10800104 	addi	r2,r2,4
   113dc:	10800037 	ldwio	r2,0(r2)
   113e0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   113e4:	e0bffa17 	ldw	r2,-24(fp)
   113e8:	1081000c 	andi	r2,r2,1024
   113ec:	10000b26 	beq	r2,zero,1141c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   113f0:	e0bff917 	ldw	r2,-28(fp)
   113f4:	10800017 	ldw	r2,0(r2)
   113f8:	10800104 	addi	r2,r2,4
   113fc:	1007883a 	mov	r3,r2
   11400:	e0bff917 	ldw	r2,-28(fp)
   11404:	10800817 	ldw	r2,32(r2)
   11408:	10810014 	ori	r2,r2,1024
   1140c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   11410:	e0bff917 	ldw	r2,-28(fp)
   11414:	10000915 	stw	zero,36(r2)
   11418:	00000a06 	br	11444 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1141c:	e0bff917 	ldw	r2,-28(fp)
   11420:	10c00917 	ldw	r3,36(r2)
   11424:	00a00034 	movhi	r2,32768
   11428:	10bfff04 	addi	r2,r2,-4
   1142c:	10c00536 	bltu	r2,r3,11444 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   11430:	e0bff917 	ldw	r2,-28(fp)
   11434:	10800917 	ldw	r2,36(r2)
   11438:	10c00044 	addi	r3,r2,1
   1143c:	e0bff917 	ldw	r2,-28(fp)
   11440:	10c00915 	stw	r3,36(r2)
   11444:	d0a4d617 	ldw	r2,-27816(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   11448:	e037883a 	mov	sp,fp
   1144c:	df000017 	ldw	fp,0(sp)
   11450:	dec00104 	addi	sp,sp,4
   11454:	f800283a 	ret

00011458 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   11458:	defffd04 	addi	sp,sp,-12
   1145c:	df000215 	stw	fp,8(sp)
   11460:	df000204 	addi	fp,sp,8
   11464:	e13ffe15 	stw	r4,-8(fp)
   11468:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1146c:	00000506 	br	11484 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   11470:	e0bfff17 	ldw	r2,-4(fp)
   11474:	1090000c 	andi	r2,r2,16384
   11478:	10000226 	beq	r2,zero,11484 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1147c:	00bffd44 	movi	r2,-11
   11480:	00000b06 	br	114b0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11484:	e0bffe17 	ldw	r2,-8(fp)
   11488:	10c00d17 	ldw	r3,52(r2)
   1148c:	e0bffe17 	ldw	r2,-8(fp)
   11490:	10800c17 	ldw	r2,48(r2)
   11494:	18800526 	beq	r3,r2,114ac <altera_avalon_jtag_uart_close+0x54>
   11498:	e0bffe17 	ldw	r2,-8(fp)
   1149c:	10c00917 	ldw	r3,36(r2)
   114a0:	e0bffe17 	ldw	r2,-8(fp)
   114a4:	10800117 	ldw	r2,4(r2)
   114a8:	18bff136 	bltu	r3,r2,11470 <_gp+0xffff5470>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   114ac:	0005883a 	mov	r2,zero
}
   114b0:	e037883a 	mov	sp,fp
   114b4:	df000017 	ldw	fp,0(sp)
   114b8:	dec00104 	addi	sp,sp,4
   114bc:	f800283a 	ret

000114c0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   114c0:	defffa04 	addi	sp,sp,-24
   114c4:	df000515 	stw	fp,20(sp)
   114c8:	df000504 	addi	fp,sp,20
   114cc:	e13ffd15 	stw	r4,-12(fp)
   114d0:	e17ffe15 	stw	r5,-8(fp)
   114d4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   114d8:	00bff9c4 	movi	r2,-25
   114dc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   114e0:	e0bffe17 	ldw	r2,-8(fp)
   114e4:	10da8060 	cmpeqi	r3,r2,27137
   114e8:	1800031e 	bne	r3,zero,114f8 <altera_avalon_jtag_uart_ioctl+0x38>
   114ec:	109a80a0 	cmpeqi	r2,r2,27138
   114f0:	1000181e 	bne	r2,zero,11554 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   114f4:	00002906 	br	1159c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   114f8:	e0bffd17 	ldw	r2,-12(fp)
   114fc:	10c00117 	ldw	r3,4(r2)
   11500:	00a00034 	movhi	r2,32768
   11504:	10bfffc4 	addi	r2,r2,-1
   11508:	18802126 	beq	r3,r2,11590 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1150c:	e0bfff17 	ldw	r2,-4(fp)
   11510:	10800017 	ldw	r2,0(r2)
   11514:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   11518:	e0bffc17 	ldw	r2,-16(fp)
   1151c:	10800090 	cmplti	r2,r2,2
   11520:	1000061e 	bne	r2,zero,1153c <altera_avalon_jtag_uart_ioctl+0x7c>
   11524:	e0fffc17 	ldw	r3,-16(fp)
   11528:	00a00034 	movhi	r2,32768
   1152c:	10bfffc4 	addi	r2,r2,-1
   11530:	18800226 	beq	r3,r2,1153c <altera_avalon_jtag_uart_ioctl+0x7c>
   11534:	e0bffc17 	ldw	r2,-16(fp)
   11538:	00000206 	br	11544 <altera_avalon_jtag_uart_ioctl+0x84>
   1153c:	00a00034 	movhi	r2,32768
   11540:	10bfff84 	addi	r2,r2,-2
   11544:	e0fffd17 	ldw	r3,-12(fp)
   11548:	18800115 	stw	r2,4(r3)
      rc = 0;
   1154c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11550:	00000f06 	br	11590 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   11554:	e0bffd17 	ldw	r2,-12(fp)
   11558:	10c00117 	ldw	r3,4(r2)
   1155c:	00a00034 	movhi	r2,32768
   11560:	10bfffc4 	addi	r2,r2,-1
   11564:	18800c26 	beq	r3,r2,11598 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11568:	e0bffd17 	ldw	r2,-12(fp)
   1156c:	10c00917 	ldw	r3,36(r2)
   11570:	e0bffd17 	ldw	r2,-12(fp)
   11574:	10800117 	ldw	r2,4(r2)
   11578:	1885803a 	cmpltu	r2,r3,r2
   1157c:	10c03fcc 	andi	r3,r2,255
   11580:	e0bfff17 	ldw	r2,-4(fp)
   11584:	10c00015 	stw	r3,0(r2)
      rc = 0;
   11588:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1158c:	00000206 	br	11598 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   11590:	0001883a 	nop
   11594:	00000106 	br	1159c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   11598:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1159c:	e0bffb17 	ldw	r2,-20(fp)
}
   115a0:	e037883a 	mov	sp,fp
   115a4:	df000017 	ldw	fp,0(sp)
   115a8:	dec00104 	addi	sp,sp,4
   115ac:	f800283a 	ret

000115b0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   115b0:	defff304 	addi	sp,sp,-52
   115b4:	dfc00c15 	stw	ra,48(sp)
   115b8:	df000b15 	stw	fp,44(sp)
   115bc:	df000b04 	addi	fp,sp,44
   115c0:	e13ffc15 	stw	r4,-16(fp)
   115c4:	e17ffd15 	stw	r5,-12(fp)
   115c8:	e1bffe15 	stw	r6,-8(fp)
   115cc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   115d0:	e0bffd17 	ldw	r2,-12(fp)
   115d4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   115d8:	00004706 	br	116f8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   115dc:	e0bffc17 	ldw	r2,-16(fp)
   115e0:	10800a17 	ldw	r2,40(r2)
   115e4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   115e8:	e0bffc17 	ldw	r2,-16(fp)
   115ec:	10800b17 	ldw	r2,44(r2)
   115f0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   115f4:	e0fff717 	ldw	r3,-36(fp)
   115f8:	e0bff817 	ldw	r2,-32(fp)
   115fc:	18800536 	bltu	r3,r2,11614 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   11600:	e0fff717 	ldw	r3,-36(fp)
   11604:	e0bff817 	ldw	r2,-32(fp)
   11608:	1885c83a 	sub	r2,r3,r2
   1160c:	e0bff615 	stw	r2,-40(fp)
   11610:	00000406 	br	11624 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   11614:	00c20004 	movi	r3,2048
   11618:	e0bff817 	ldw	r2,-32(fp)
   1161c:	1885c83a 	sub	r2,r3,r2
   11620:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11624:	e0bff617 	ldw	r2,-40(fp)
   11628:	10001e26 	beq	r2,zero,116a4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1162c:	e0fffe17 	ldw	r3,-8(fp)
   11630:	e0bff617 	ldw	r2,-40(fp)
   11634:	1880022e 	bgeu	r3,r2,11640 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   11638:	e0bffe17 	ldw	r2,-8(fp)
   1163c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   11640:	e0bffc17 	ldw	r2,-16(fp)
   11644:	10c00e04 	addi	r3,r2,56
   11648:	e0bff817 	ldw	r2,-32(fp)
   1164c:	1885883a 	add	r2,r3,r2
   11650:	e1bff617 	ldw	r6,-40(fp)
   11654:	100b883a 	mov	r5,r2
   11658:	e13ff517 	ldw	r4,-44(fp)
   1165c:	0012aec0 	call	12aec <memcpy>
      ptr   += n;
   11660:	e0fff517 	ldw	r3,-44(fp)
   11664:	e0bff617 	ldw	r2,-40(fp)
   11668:	1885883a 	add	r2,r3,r2
   1166c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   11670:	e0fffe17 	ldw	r3,-8(fp)
   11674:	e0bff617 	ldw	r2,-40(fp)
   11678:	1885c83a 	sub	r2,r3,r2
   1167c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11680:	e0fff817 	ldw	r3,-32(fp)
   11684:	e0bff617 	ldw	r2,-40(fp)
   11688:	1885883a 	add	r2,r3,r2
   1168c:	10c1ffcc 	andi	r3,r2,2047
   11690:	e0bffc17 	ldw	r2,-16(fp)
   11694:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   11698:	e0bffe17 	ldw	r2,-8(fp)
   1169c:	00bfcf16 	blt	zero,r2,115dc <_gp+0xffff55dc>
   116a0:	00000106 	br	116a8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   116a4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   116a8:	e0fff517 	ldw	r3,-44(fp)
   116ac:	e0bffd17 	ldw	r2,-12(fp)
   116b0:	1880141e 	bne	r3,r2,11704 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   116b4:	e0bfff17 	ldw	r2,-4(fp)
   116b8:	1090000c 	andi	r2,r2,16384
   116bc:	1000131e 	bne	r2,zero,1170c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   116c0:	0001883a 	nop
   116c4:	e0bffc17 	ldw	r2,-16(fp)
   116c8:	10c00a17 	ldw	r3,40(r2)
   116cc:	e0bff717 	ldw	r2,-36(fp)
   116d0:	1880051e 	bne	r3,r2,116e8 <altera_avalon_jtag_uart_read+0x138>
   116d4:	e0bffc17 	ldw	r2,-16(fp)
   116d8:	10c00917 	ldw	r3,36(r2)
   116dc:	e0bffc17 	ldw	r2,-16(fp)
   116e0:	10800117 	ldw	r2,4(r2)
   116e4:	18bff736 	bltu	r3,r2,116c4 <_gp+0xffff56c4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   116e8:	e0bffc17 	ldw	r2,-16(fp)
   116ec:	10c00a17 	ldw	r3,40(r2)
   116f0:	e0bff717 	ldw	r2,-36(fp)
   116f4:	18800726 	beq	r3,r2,11714 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   116f8:	e0bffe17 	ldw	r2,-8(fp)
   116fc:	00bfb716 	blt	zero,r2,115dc <_gp+0xffff55dc>
   11700:	00000506 	br	11718 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   11704:	0001883a 	nop
   11708:	00000306 	br	11718 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1170c:	0001883a 	nop
   11710:	00000106 	br	11718 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   11714:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   11718:	e0fff517 	ldw	r3,-44(fp)
   1171c:	e0bffd17 	ldw	r2,-12(fp)
   11720:	18801826 	beq	r3,r2,11784 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11724:	0005303a 	rdctl	r2,status
   11728:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1172c:	e0fffb17 	ldw	r3,-20(fp)
   11730:	00bfff84 	movi	r2,-2
   11734:	1884703a 	and	r2,r3,r2
   11738:	1001703a 	wrctl	status,r2
  
  return context;
   1173c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   11740:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11744:	e0bffc17 	ldw	r2,-16(fp)
   11748:	10800817 	ldw	r2,32(r2)
   1174c:	10c00054 	ori	r3,r2,1
   11750:	e0bffc17 	ldw	r2,-16(fp)
   11754:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11758:	e0bffc17 	ldw	r2,-16(fp)
   1175c:	10800017 	ldw	r2,0(r2)
   11760:	10800104 	addi	r2,r2,4
   11764:	1007883a 	mov	r3,r2
   11768:	e0bffc17 	ldw	r2,-16(fp)
   1176c:	10800817 	ldw	r2,32(r2)
   11770:	18800035 	stwio	r2,0(r3)
   11774:	e0bffa17 	ldw	r2,-24(fp)
   11778:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1177c:	e0bff917 	ldw	r2,-28(fp)
   11780:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11784:	e0fff517 	ldw	r3,-44(fp)
   11788:	e0bffd17 	ldw	r2,-12(fp)
   1178c:	18800426 	beq	r3,r2,117a0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   11790:	e0fff517 	ldw	r3,-44(fp)
   11794:	e0bffd17 	ldw	r2,-12(fp)
   11798:	1885c83a 	sub	r2,r3,r2
   1179c:	00000606 	br	117b8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   117a0:	e0bfff17 	ldw	r2,-4(fp)
   117a4:	1090000c 	andi	r2,r2,16384
   117a8:	10000226 	beq	r2,zero,117b4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   117ac:	00bffd44 	movi	r2,-11
   117b0:	00000106 	br	117b8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   117b4:	00bffec4 	movi	r2,-5
}
   117b8:	e037883a 	mov	sp,fp
   117bc:	dfc00117 	ldw	ra,4(sp)
   117c0:	df000017 	ldw	fp,0(sp)
   117c4:	dec00204 	addi	sp,sp,8
   117c8:	f800283a 	ret

000117cc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   117cc:	defff304 	addi	sp,sp,-52
   117d0:	dfc00c15 	stw	ra,48(sp)
   117d4:	df000b15 	stw	fp,44(sp)
   117d8:	df000b04 	addi	fp,sp,44
   117dc:	e13ffc15 	stw	r4,-16(fp)
   117e0:	e17ffd15 	stw	r5,-12(fp)
   117e4:	e1bffe15 	stw	r6,-8(fp)
   117e8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   117ec:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   117f0:	e0bffd17 	ldw	r2,-12(fp)
   117f4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   117f8:	00003706 	br	118d8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   117fc:	e0bffc17 	ldw	r2,-16(fp)
   11800:	10800c17 	ldw	r2,48(r2)
   11804:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   11808:	e0bffc17 	ldw	r2,-16(fp)
   1180c:	10800d17 	ldw	r2,52(r2)
   11810:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11814:	e0fff917 	ldw	r3,-28(fp)
   11818:	e0bff517 	ldw	r2,-44(fp)
   1181c:	1880062e 	bgeu	r3,r2,11838 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   11820:	e0fff517 	ldw	r3,-44(fp)
   11824:	e0bff917 	ldw	r2,-28(fp)
   11828:	1885c83a 	sub	r2,r3,r2
   1182c:	10bfffc4 	addi	r2,r2,-1
   11830:	e0bff615 	stw	r2,-40(fp)
   11834:	00000b06 	br	11864 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   11838:	e0bff517 	ldw	r2,-44(fp)
   1183c:	10000526 	beq	r2,zero,11854 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   11840:	00c20004 	movi	r3,2048
   11844:	e0bff917 	ldw	r2,-28(fp)
   11848:	1885c83a 	sub	r2,r3,r2
   1184c:	e0bff615 	stw	r2,-40(fp)
   11850:	00000406 	br	11864 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11854:	00c1ffc4 	movi	r3,2047
   11858:	e0bff917 	ldw	r2,-28(fp)
   1185c:	1885c83a 	sub	r2,r3,r2
   11860:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11864:	e0bff617 	ldw	r2,-40(fp)
   11868:	10001e26 	beq	r2,zero,118e4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1186c:	e0fffe17 	ldw	r3,-8(fp)
   11870:	e0bff617 	ldw	r2,-40(fp)
   11874:	1880022e 	bgeu	r3,r2,11880 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   11878:	e0bffe17 	ldw	r2,-8(fp)
   1187c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11880:	e0bffc17 	ldw	r2,-16(fp)
   11884:	10c20e04 	addi	r3,r2,2104
   11888:	e0bff917 	ldw	r2,-28(fp)
   1188c:	1885883a 	add	r2,r3,r2
   11890:	e1bff617 	ldw	r6,-40(fp)
   11894:	e17ffd17 	ldw	r5,-12(fp)
   11898:	1009883a 	mov	r4,r2
   1189c:	0012aec0 	call	12aec <memcpy>
      ptr   += n;
   118a0:	e0fffd17 	ldw	r3,-12(fp)
   118a4:	e0bff617 	ldw	r2,-40(fp)
   118a8:	1885883a 	add	r2,r3,r2
   118ac:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   118b0:	e0fffe17 	ldw	r3,-8(fp)
   118b4:	e0bff617 	ldw	r2,-40(fp)
   118b8:	1885c83a 	sub	r2,r3,r2
   118bc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   118c0:	e0fff917 	ldw	r3,-28(fp)
   118c4:	e0bff617 	ldw	r2,-40(fp)
   118c8:	1885883a 	add	r2,r3,r2
   118cc:	10c1ffcc 	andi	r3,r2,2047
   118d0:	e0bffc17 	ldw	r2,-16(fp)
   118d4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   118d8:	e0bffe17 	ldw	r2,-8(fp)
   118dc:	00bfc716 	blt	zero,r2,117fc <_gp+0xffff57fc>
   118e0:	00000106 	br	118e8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   118e4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118e8:	0005303a 	rdctl	r2,status
   118ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118f0:	e0fffb17 	ldw	r3,-20(fp)
   118f4:	00bfff84 	movi	r2,-2
   118f8:	1884703a 	and	r2,r3,r2
   118fc:	1001703a 	wrctl	status,r2
  
  return context;
   11900:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11904:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11908:	e0bffc17 	ldw	r2,-16(fp)
   1190c:	10800817 	ldw	r2,32(r2)
   11910:	10c00094 	ori	r3,r2,2
   11914:	e0bffc17 	ldw	r2,-16(fp)
   11918:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1191c:	e0bffc17 	ldw	r2,-16(fp)
   11920:	10800017 	ldw	r2,0(r2)
   11924:	10800104 	addi	r2,r2,4
   11928:	1007883a 	mov	r3,r2
   1192c:	e0bffc17 	ldw	r2,-16(fp)
   11930:	10800817 	ldw	r2,32(r2)
   11934:	18800035 	stwio	r2,0(r3)
   11938:	e0bffa17 	ldw	r2,-24(fp)
   1193c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11940:	e0bff817 	ldw	r2,-32(fp)
   11944:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   11948:	e0bffe17 	ldw	r2,-8(fp)
   1194c:	0080100e 	bge	zero,r2,11990 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   11950:	e0bfff17 	ldw	r2,-4(fp)
   11954:	1090000c 	andi	r2,r2,16384
   11958:	1000101e 	bne	r2,zero,1199c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1195c:	0001883a 	nop
   11960:	e0bffc17 	ldw	r2,-16(fp)
   11964:	10c00d17 	ldw	r3,52(r2)
   11968:	e0bff517 	ldw	r2,-44(fp)
   1196c:	1880051e 	bne	r3,r2,11984 <altera_avalon_jtag_uart_write+0x1b8>
   11970:	e0bffc17 	ldw	r2,-16(fp)
   11974:	10c00917 	ldw	r3,36(r2)
   11978:	e0bffc17 	ldw	r2,-16(fp)
   1197c:	10800117 	ldw	r2,4(r2)
   11980:	18bff736 	bltu	r3,r2,11960 <_gp+0xffff5960>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11984:	e0bffc17 	ldw	r2,-16(fp)
   11988:	10800917 	ldw	r2,36(r2)
   1198c:	1000051e 	bne	r2,zero,119a4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   11990:	e0bffe17 	ldw	r2,-8(fp)
   11994:	00bfd016 	blt	zero,r2,118d8 <_gp+0xffff58d8>
   11998:	00000306 	br	119a8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1199c:	0001883a 	nop
   119a0:	00000106 	br	119a8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   119a4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   119a8:	e0fffd17 	ldw	r3,-12(fp)
   119ac:	e0bff717 	ldw	r2,-36(fp)
   119b0:	18800426 	beq	r3,r2,119c4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   119b4:	e0fffd17 	ldw	r3,-12(fp)
   119b8:	e0bff717 	ldw	r2,-36(fp)
   119bc:	1885c83a 	sub	r2,r3,r2
   119c0:	00000606 	br	119dc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   119c4:	e0bfff17 	ldw	r2,-4(fp)
   119c8:	1090000c 	andi	r2,r2,16384
   119cc:	10000226 	beq	r2,zero,119d8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   119d0:	00bffd44 	movi	r2,-11
   119d4:	00000106 	br	119dc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   119d8:	00bffec4 	movi	r2,-5
}
   119dc:	e037883a 	mov	sp,fp
   119e0:	dfc00117 	ldw	ra,4(sp)
   119e4:	df000017 	ldw	fp,0(sp)
   119e8:	dec00204 	addi	sp,sp,8
   119ec:	f800283a 	ret

000119f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   119f0:	defff504 	addi	sp,sp,-44
   119f4:	df000a15 	stw	fp,40(sp)
   119f8:	df000a04 	addi	fp,sp,40
   119fc:	e13ffc15 	stw	r4,-16(fp)
   11a00:	e17ffd15 	stw	r5,-12(fp)
   11a04:	e1bffe15 	stw	r6,-8(fp)
   11a08:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11a0c:	e03ff615 	stw	zero,-40(fp)
   11a10:	d0a4d617 	ldw	r2,-27816(gp)
  
  if (alt_ticks_per_second ())
   11a14:	10003c26 	beq	r2,zero,11b08 <alt_alarm_start+0x118>
  {
    if (alarm)
   11a18:	e0bffc17 	ldw	r2,-16(fp)
   11a1c:	10003826 	beq	r2,zero,11b00 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   11a20:	e0bffc17 	ldw	r2,-16(fp)
   11a24:	e0fffe17 	ldw	r3,-8(fp)
   11a28:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11a2c:	e0bffc17 	ldw	r2,-16(fp)
   11a30:	e0ffff17 	ldw	r3,-4(fp)
   11a34:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a38:	0005303a 	rdctl	r2,status
   11a3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a40:	e0fff917 	ldw	r3,-28(fp)
   11a44:	00bfff84 	movi	r2,-2
   11a48:	1884703a 	and	r2,r3,r2
   11a4c:	1001703a 	wrctl	status,r2
  
  return context;
   11a50:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   11a54:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11a58:	d0a4d717 	ldw	r2,-27812(gp)
      
      current_nticks = alt_nticks();
   11a5c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11a60:	e0fffd17 	ldw	r3,-12(fp)
   11a64:	e0bff617 	ldw	r2,-40(fp)
   11a68:	1885883a 	add	r2,r3,r2
   11a6c:	10c00044 	addi	r3,r2,1
   11a70:	e0bffc17 	ldw	r2,-16(fp)
   11a74:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11a78:	e0bffc17 	ldw	r2,-16(fp)
   11a7c:	10c00217 	ldw	r3,8(r2)
   11a80:	e0bff617 	ldw	r2,-40(fp)
   11a84:	1880042e 	bgeu	r3,r2,11a98 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   11a88:	e0bffc17 	ldw	r2,-16(fp)
   11a8c:	00c00044 	movi	r3,1
   11a90:	10c00405 	stb	r3,16(r2)
   11a94:	00000206 	br	11aa0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   11a98:	e0bffc17 	ldw	r2,-16(fp)
   11a9c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11aa0:	e0bffc17 	ldw	r2,-16(fp)
   11aa4:	d0e00904 	addi	r3,gp,-32732
   11aa8:	e0fffa15 	stw	r3,-24(fp)
   11aac:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11ab0:	e0bffb17 	ldw	r2,-20(fp)
   11ab4:	e0fffa17 	ldw	r3,-24(fp)
   11ab8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11abc:	e0bffa17 	ldw	r2,-24(fp)
   11ac0:	10c00017 	ldw	r3,0(r2)
   11ac4:	e0bffb17 	ldw	r2,-20(fp)
   11ac8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11acc:	e0bffa17 	ldw	r2,-24(fp)
   11ad0:	10800017 	ldw	r2,0(r2)
   11ad4:	e0fffb17 	ldw	r3,-20(fp)
   11ad8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11adc:	e0bffa17 	ldw	r2,-24(fp)
   11ae0:	e0fffb17 	ldw	r3,-20(fp)
   11ae4:	10c00015 	stw	r3,0(r2)
   11ae8:	e0bff817 	ldw	r2,-32(fp)
   11aec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11af0:	e0bff717 	ldw	r2,-36(fp)
   11af4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11af8:	0005883a 	mov	r2,zero
   11afc:	00000306 	br	11b0c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11b00:	00bffa84 	movi	r2,-22
   11b04:	00000106 	br	11b0c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   11b08:	00bfde84 	movi	r2,-134
  }
}
   11b0c:	e037883a 	mov	sp,fp
   11b10:	df000017 	ldw	fp,0(sp)
   11b14:	dec00104 	addi	sp,sp,4
   11b18:	f800283a 	ret

00011b1c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11b1c:	defffa04 	addi	sp,sp,-24
   11b20:	dfc00515 	stw	ra,20(sp)
   11b24:	df000415 	stw	fp,16(sp)
   11b28:	df000404 	addi	fp,sp,16
   11b2c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   11b30:	00800244 	movi	r2,9
   11b34:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   11b38:	014003f4 	movhi	r5,15
   11b3c:	29509004 	addi	r5,r5,16960
   11b40:	e13ffd17 	ldw	r4,-12(fp)
   11b44:	0010be40 	call	10be4 <__mulsi3>
   11b48:	100b883a 	mov	r5,r2
   11b4c:	0100bef4 	movhi	r4,763
   11b50:	213c2004 	addi	r4,r4,-3968
   11b54:	0010b280 	call	10b28 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11b58:	100b883a 	mov	r5,r2
   11b5c:	01200034 	movhi	r4,32768
   11b60:	213fffc4 	addi	r4,r4,-1
   11b64:	0010b280 	call	10b28 <__udivsi3>
   11b68:	100b883a 	mov	r5,r2
   11b6c:	e13fff17 	ldw	r4,-4(fp)
   11b70:	0010b280 	call	10b28 <__udivsi3>
   11b74:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11b78:	e0bffe17 	ldw	r2,-8(fp)
   11b7c:	10002a26 	beq	r2,zero,11c28 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   11b80:	e03ffc15 	stw	zero,-16(fp)
   11b84:	00001706 	br	11be4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11b88:	00a00034 	movhi	r2,32768
   11b8c:	10bfffc4 	addi	r2,r2,-1
   11b90:	10bfffc4 	addi	r2,r2,-1
   11b94:	103ffe1e 	bne	r2,zero,11b90 <_gp+0xffff5b90>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   11b98:	014003f4 	movhi	r5,15
   11b9c:	29509004 	addi	r5,r5,16960
   11ba0:	e13ffd17 	ldw	r4,-12(fp)
   11ba4:	0010be40 	call	10be4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11ba8:	100b883a 	mov	r5,r2
   11bac:	0100bef4 	movhi	r4,763
   11bb0:	213c2004 	addi	r4,r4,-3968
   11bb4:	0010b280 	call	10b28 <__udivsi3>
   11bb8:	100b883a 	mov	r5,r2
   11bbc:	01200034 	movhi	r4,32768
   11bc0:	213fffc4 	addi	r4,r4,-1
   11bc4:	0010b280 	call	10b28 <__udivsi3>
   11bc8:	1007883a 	mov	r3,r2
   11bcc:	e0bfff17 	ldw	r2,-4(fp)
   11bd0:	10c5c83a 	sub	r2,r2,r3
   11bd4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11bd8:	e0bffc17 	ldw	r2,-16(fp)
   11bdc:	10800044 	addi	r2,r2,1
   11be0:	e0bffc15 	stw	r2,-16(fp)
   11be4:	e0fffc17 	ldw	r3,-16(fp)
   11be8:	e0bffe17 	ldw	r2,-8(fp)
   11bec:	18bfe616 	blt	r3,r2,11b88 <_gp+0xffff5b88>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11bf0:	014003f4 	movhi	r5,15
   11bf4:	29509004 	addi	r5,r5,16960
   11bf8:	e13ffd17 	ldw	r4,-12(fp)
   11bfc:	0010be40 	call	10be4 <__mulsi3>
   11c00:	100b883a 	mov	r5,r2
   11c04:	0100bef4 	movhi	r4,763
   11c08:	213c2004 	addi	r4,r4,-3968
   11c0c:	0010b280 	call	10b28 <__udivsi3>
   11c10:	e17fff17 	ldw	r5,-4(fp)
   11c14:	1009883a 	mov	r4,r2
   11c18:	0010be40 	call	10be4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11c1c:	10bfffc4 	addi	r2,r2,-1
   11c20:	103ffe1e 	bne	r2,zero,11c1c <_gp+0xffff5c1c>
   11c24:	00000d06 	br	11c5c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11c28:	014003f4 	movhi	r5,15
   11c2c:	29509004 	addi	r5,r5,16960
   11c30:	e13ffd17 	ldw	r4,-12(fp)
   11c34:	0010be40 	call	10be4 <__mulsi3>
   11c38:	100b883a 	mov	r5,r2
   11c3c:	0100bef4 	movhi	r4,763
   11c40:	213c2004 	addi	r4,r4,-3968
   11c44:	0010b280 	call	10b28 <__udivsi3>
   11c48:	e17fff17 	ldw	r5,-4(fp)
   11c4c:	1009883a 	mov	r4,r2
   11c50:	0010be40 	call	10be4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11c54:	10bfffc4 	addi	r2,r2,-1
   11c58:	00bffe16 	blt	zero,r2,11c54 <_gp+0xffff5c54>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   11c5c:	0005883a 	mov	r2,zero
}
   11c60:	e037883a 	mov	sp,fp
   11c64:	dfc00117 	ldw	ra,4(sp)
   11c68:	df000017 	ldw	fp,0(sp)
   11c6c:	dec00204 	addi	sp,sp,8
   11c70:	f800283a 	ret

00011c74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11c74:	defffe04 	addi	sp,sp,-8
   11c78:	dfc00115 	stw	ra,4(sp)
   11c7c:	df000015 	stw	fp,0(sp)
   11c80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11c84:	d0a00717 	ldw	r2,-32740(gp)
   11c88:	10000326 	beq	r2,zero,11c98 <alt_get_errno+0x24>
   11c8c:	d0a00717 	ldw	r2,-32740(gp)
   11c90:	103ee83a 	callr	r2
   11c94:	00000106 	br	11c9c <alt_get_errno+0x28>
   11c98:	d0a4d104 	addi	r2,gp,-27836
}
   11c9c:	e037883a 	mov	sp,fp
   11ca0:	dfc00117 	ldw	ra,4(sp)
   11ca4:	df000017 	ldw	fp,0(sp)
   11ca8:	dec00204 	addi	sp,sp,8
   11cac:	f800283a 	ret

00011cb0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11cb0:	defffb04 	addi	sp,sp,-20
   11cb4:	dfc00415 	stw	ra,16(sp)
   11cb8:	df000315 	stw	fp,12(sp)
   11cbc:	df000304 	addi	fp,sp,12
   11cc0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11cc4:	e0bfff17 	ldw	r2,-4(fp)
   11cc8:	10000816 	blt	r2,zero,11cec <close+0x3c>
   11ccc:	01400304 	movi	r5,12
   11cd0:	e13fff17 	ldw	r4,-4(fp)
   11cd4:	0010be40 	call	10be4 <__mulsi3>
   11cd8:	1007883a 	mov	r3,r2
   11cdc:	00800074 	movhi	r2,1
   11ce0:	108fa004 	addi	r2,r2,16000
   11ce4:	1885883a 	add	r2,r3,r2
   11ce8:	00000106 	br	11cf0 <close+0x40>
   11cec:	0005883a 	mov	r2,zero
   11cf0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11cf4:	e0bffd17 	ldw	r2,-12(fp)
   11cf8:	10001926 	beq	r2,zero,11d60 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11cfc:	e0bffd17 	ldw	r2,-12(fp)
   11d00:	10800017 	ldw	r2,0(r2)
   11d04:	10800417 	ldw	r2,16(r2)
   11d08:	10000626 	beq	r2,zero,11d24 <close+0x74>
   11d0c:	e0bffd17 	ldw	r2,-12(fp)
   11d10:	10800017 	ldw	r2,0(r2)
   11d14:	10800417 	ldw	r2,16(r2)
   11d18:	e13ffd17 	ldw	r4,-12(fp)
   11d1c:	103ee83a 	callr	r2
   11d20:	00000106 	br	11d28 <close+0x78>
   11d24:	0005883a 	mov	r2,zero
   11d28:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11d2c:	e13fff17 	ldw	r4,-4(fp)
   11d30:	00125580 	call	12558 <alt_release_fd>
    if (rval < 0)
   11d34:	e0bffe17 	ldw	r2,-8(fp)
   11d38:	1000070e 	bge	r2,zero,11d58 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11d3c:	0011c740 	call	11c74 <alt_get_errno>
   11d40:	1007883a 	mov	r3,r2
   11d44:	e0bffe17 	ldw	r2,-8(fp)
   11d48:	0085c83a 	sub	r2,zero,r2
   11d4c:	18800015 	stw	r2,0(r3)
      return -1;
   11d50:	00bfffc4 	movi	r2,-1
   11d54:	00000706 	br	11d74 <close+0xc4>
    }
    return 0;
   11d58:	0005883a 	mov	r2,zero
   11d5c:	00000506 	br	11d74 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11d60:	0011c740 	call	11c74 <alt_get_errno>
   11d64:	1007883a 	mov	r3,r2
   11d68:	00801444 	movi	r2,81
   11d6c:	18800015 	stw	r2,0(r3)
    return -1;
   11d70:	00bfffc4 	movi	r2,-1
  }
}
   11d74:	e037883a 	mov	sp,fp
   11d78:	dfc00117 	ldw	ra,4(sp)
   11d7c:	df000017 	ldw	fp,0(sp)
   11d80:	dec00204 	addi	sp,sp,8
   11d84:	f800283a 	ret

00011d88 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11d88:	deffff04 	addi	sp,sp,-4
   11d8c:	df000015 	stw	fp,0(sp)
   11d90:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11d94:	0001883a 	nop
   11d98:	e037883a 	mov	sp,fp
   11d9c:	df000017 	ldw	fp,0(sp)
   11da0:	dec00104 	addi	sp,sp,4
   11da4:	f800283a 	ret

00011da8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11da8:	defffc04 	addi	sp,sp,-16
   11dac:	df000315 	stw	fp,12(sp)
   11db0:	df000304 	addi	fp,sp,12
   11db4:	e13ffd15 	stw	r4,-12(fp)
   11db8:	e17ffe15 	stw	r5,-8(fp)
   11dbc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11dc0:	e0bfff17 	ldw	r2,-4(fp)
}
   11dc4:	e037883a 	mov	sp,fp
   11dc8:	df000017 	ldw	fp,0(sp)
   11dcc:	dec00104 	addi	sp,sp,4
   11dd0:	f800283a 	ret

00011dd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11dd4:	defffe04 	addi	sp,sp,-8
   11dd8:	dfc00115 	stw	ra,4(sp)
   11ddc:	df000015 	stw	fp,0(sp)
   11de0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11de4:	d0a00717 	ldw	r2,-32740(gp)
   11de8:	10000326 	beq	r2,zero,11df8 <alt_get_errno+0x24>
   11dec:	d0a00717 	ldw	r2,-32740(gp)
   11df0:	103ee83a 	callr	r2
   11df4:	00000106 	br	11dfc <alt_get_errno+0x28>
   11df8:	d0a4d104 	addi	r2,gp,-27836
}
   11dfc:	e037883a 	mov	sp,fp
   11e00:	dfc00117 	ldw	ra,4(sp)
   11e04:	df000017 	ldw	fp,0(sp)
   11e08:	dec00204 	addi	sp,sp,8
   11e0c:	f800283a 	ret

00011e10 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11e10:	defffa04 	addi	sp,sp,-24
   11e14:	dfc00515 	stw	ra,20(sp)
   11e18:	df000415 	stw	fp,16(sp)
   11e1c:	df000404 	addi	fp,sp,16
   11e20:	e13ffe15 	stw	r4,-8(fp)
   11e24:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11e28:	e0bffe17 	ldw	r2,-8(fp)
   11e2c:	10000326 	beq	r2,zero,11e3c <alt_dev_llist_insert+0x2c>
   11e30:	e0bffe17 	ldw	r2,-8(fp)
   11e34:	10800217 	ldw	r2,8(r2)
   11e38:	1000061e 	bne	r2,zero,11e54 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11e3c:	0011dd40 	call	11dd4 <alt_get_errno>
   11e40:	1007883a 	mov	r3,r2
   11e44:	00800584 	movi	r2,22
   11e48:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11e4c:	00bffa84 	movi	r2,-22
   11e50:	00001306 	br	11ea0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11e54:	e0bffe17 	ldw	r2,-8(fp)
   11e58:	e0ffff17 	ldw	r3,-4(fp)
   11e5c:	e0fffc15 	stw	r3,-16(fp)
   11e60:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11e64:	e0bffd17 	ldw	r2,-12(fp)
   11e68:	e0fffc17 	ldw	r3,-16(fp)
   11e6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11e70:	e0bffc17 	ldw	r2,-16(fp)
   11e74:	10c00017 	ldw	r3,0(r2)
   11e78:	e0bffd17 	ldw	r2,-12(fp)
   11e7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11e80:	e0bffc17 	ldw	r2,-16(fp)
   11e84:	10800017 	ldw	r2,0(r2)
   11e88:	e0fffd17 	ldw	r3,-12(fp)
   11e8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11e90:	e0bffc17 	ldw	r2,-16(fp)
   11e94:	e0fffd17 	ldw	r3,-12(fp)
   11e98:	10c00015 	stw	r3,0(r2)

  return 0;  
   11e9c:	0005883a 	mov	r2,zero
}
   11ea0:	e037883a 	mov	sp,fp
   11ea4:	dfc00117 	ldw	ra,4(sp)
   11ea8:	df000017 	ldw	fp,0(sp)
   11eac:	dec00204 	addi	sp,sp,8
   11eb0:	f800283a 	ret

00011eb4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11eb4:	deffff04 	addi	sp,sp,-4
   11eb8:	df000015 	stw	fp,0(sp)
   11ebc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11ec0:	0001883a 	nop
   11ec4:	e037883a 	mov	sp,fp
   11ec8:	df000017 	ldw	fp,0(sp)
   11ecc:	dec00104 	addi	sp,sp,4
   11ed0:	f800283a 	ret

00011ed4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11ed4:	defff904 	addi	sp,sp,-28
   11ed8:	dfc00615 	stw	ra,24(sp)
   11edc:	df000515 	stw	fp,20(sp)
   11ee0:	df000504 	addi	fp,sp,20
   11ee4:	e13ffc15 	stw	r4,-16(fp)
   11ee8:	e17ffd15 	stw	r5,-12(fp)
   11eec:	e1bffe15 	stw	r6,-8(fp)
   11ef0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11ef4:	e0800217 	ldw	r2,8(fp)
   11ef8:	d8800015 	stw	r2,0(sp)
   11efc:	e1ffff17 	ldw	r7,-4(fp)
   11f00:	e1bffe17 	ldw	r6,-8(fp)
   11f04:	e17ffd17 	ldw	r5,-12(fp)
   11f08:	e13ffc17 	ldw	r4,-16(fp)
   11f0c:	00120840 	call	12084 <alt_iic_isr_register>
}  
   11f10:	e037883a 	mov	sp,fp
   11f14:	dfc00117 	ldw	ra,4(sp)
   11f18:	df000017 	ldw	fp,0(sp)
   11f1c:	dec00204 	addi	sp,sp,8
   11f20:	f800283a 	ret

00011f24 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   11f24:	defff904 	addi	sp,sp,-28
   11f28:	df000615 	stw	fp,24(sp)
   11f2c:	df000604 	addi	fp,sp,24
   11f30:	e13ffe15 	stw	r4,-8(fp)
   11f34:	e17fff15 	stw	r5,-4(fp)
   11f38:	e0bfff17 	ldw	r2,-4(fp)
   11f3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f40:	0005303a 	rdctl	r2,status
   11f44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f48:	e0fffb17 	ldw	r3,-20(fp)
   11f4c:	00bfff84 	movi	r2,-2
   11f50:	1884703a 	and	r2,r3,r2
   11f54:	1001703a 	wrctl	status,r2
  
  return context;
   11f58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11f5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   11f60:	00c00044 	movi	r3,1
   11f64:	e0bffa17 	ldw	r2,-24(fp)
   11f68:	1884983a 	sll	r2,r3,r2
   11f6c:	1007883a 	mov	r3,r2
   11f70:	d0a4d517 	ldw	r2,-27820(gp)
   11f74:	1884b03a 	or	r2,r3,r2
   11f78:	d0a4d515 	stw	r2,-27820(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11f7c:	d0a4d517 	ldw	r2,-27820(gp)
   11f80:	100170fa 	wrctl	ienable,r2
   11f84:	e0bffc17 	ldw	r2,-16(fp)
   11f88:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f8c:	e0bffd17 	ldw	r2,-12(fp)
   11f90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11f94:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11f98:	0001883a 	nop
}
   11f9c:	e037883a 	mov	sp,fp
   11fa0:	df000017 	ldw	fp,0(sp)
   11fa4:	dec00104 	addi	sp,sp,4
   11fa8:	f800283a 	ret

00011fac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11fac:	defff904 	addi	sp,sp,-28
   11fb0:	df000615 	stw	fp,24(sp)
   11fb4:	df000604 	addi	fp,sp,24
   11fb8:	e13ffe15 	stw	r4,-8(fp)
   11fbc:	e17fff15 	stw	r5,-4(fp)
   11fc0:	e0bfff17 	ldw	r2,-4(fp)
   11fc4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11fc8:	0005303a 	rdctl	r2,status
   11fcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11fd0:	e0fffb17 	ldw	r3,-20(fp)
   11fd4:	00bfff84 	movi	r2,-2
   11fd8:	1884703a 	and	r2,r3,r2
   11fdc:	1001703a 	wrctl	status,r2
  
  return context;
   11fe0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11fe4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11fe8:	00c00044 	movi	r3,1
   11fec:	e0bffa17 	ldw	r2,-24(fp)
   11ff0:	1884983a 	sll	r2,r3,r2
   11ff4:	0084303a 	nor	r2,zero,r2
   11ff8:	1007883a 	mov	r3,r2
   11ffc:	d0a4d517 	ldw	r2,-27820(gp)
   12000:	1884703a 	and	r2,r3,r2
   12004:	d0a4d515 	stw	r2,-27820(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12008:	d0a4d517 	ldw	r2,-27820(gp)
   1200c:	100170fa 	wrctl	ienable,r2
   12010:	e0bffc17 	ldw	r2,-16(fp)
   12014:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12018:	e0bffd17 	ldw	r2,-12(fp)
   1201c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12020:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   12024:	0001883a 	nop
}
   12028:	e037883a 	mov	sp,fp
   1202c:	df000017 	ldw	fp,0(sp)
   12030:	dec00104 	addi	sp,sp,4
   12034:	f800283a 	ret

00012038 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   12038:	defffc04 	addi	sp,sp,-16
   1203c:	df000315 	stw	fp,12(sp)
   12040:	df000304 	addi	fp,sp,12
   12044:	e13ffe15 	stw	r4,-8(fp)
   12048:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1204c:	000530fa 	rdctl	r2,ienable
   12050:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   12054:	00c00044 	movi	r3,1
   12058:	e0bfff17 	ldw	r2,-4(fp)
   1205c:	1884983a 	sll	r2,r3,r2
   12060:	1007883a 	mov	r3,r2
   12064:	e0bffd17 	ldw	r2,-12(fp)
   12068:	1884703a 	and	r2,r3,r2
   1206c:	1004c03a 	cmpne	r2,r2,zero
   12070:	10803fcc 	andi	r2,r2,255
}
   12074:	e037883a 	mov	sp,fp
   12078:	df000017 	ldw	fp,0(sp)
   1207c:	dec00104 	addi	sp,sp,4
   12080:	f800283a 	ret

00012084 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12084:	defff504 	addi	sp,sp,-44
   12088:	dfc00a15 	stw	ra,40(sp)
   1208c:	df000915 	stw	fp,36(sp)
   12090:	df000904 	addi	fp,sp,36
   12094:	e13ffc15 	stw	r4,-16(fp)
   12098:	e17ffd15 	stw	r5,-12(fp)
   1209c:	e1bffe15 	stw	r6,-8(fp)
   120a0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   120a4:	00bffa84 	movi	r2,-22
   120a8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   120ac:	e0bffd17 	ldw	r2,-12(fp)
   120b0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   120b4:	e0bff817 	ldw	r2,-32(fp)
   120b8:	10800808 	cmpgei	r2,r2,32
   120bc:	1000271e 	bne	r2,zero,1215c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   120c0:	0005303a 	rdctl	r2,status
   120c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   120c8:	e0fffb17 	ldw	r3,-20(fp)
   120cc:	00bfff84 	movi	r2,-2
   120d0:	1884703a 	and	r2,r3,r2
   120d4:	1001703a 	wrctl	status,r2
  
  return context;
   120d8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   120dc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   120e0:	00800074 	movhi	r2,1
   120e4:	1094d904 	addi	r2,r2,21348
   120e8:	e0fff817 	ldw	r3,-32(fp)
   120ec:	180690fa 	slli	r3,r3,3
   120f0:	10c5883a 	add	r2,r2,r3
   120f4:	e0fffe17 	ldw	r3,-8(fp)
   120f8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   120fc:	00800074 	movhi	r2,1
   12100:	1094d904 	addi	r2,r2,21348
   12104:	e0fff817 	ldw	r3,-32(fp)
   12108:	180690fa 	slli	r3,r3,3
   1210c:	10c5883a 	add	r2,r2,r3
   12110:	10800104 	addi	r2,r2,4
   12114:	e0ffff17 	ldw	r3,-4(fp)
   12118:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1211c:	e0bffe17 	ldw	r2,-8(fp)
   12120:	10000526 	beq	r2,zero,12138 <alt_iic_isr_register+0xb4>
   12124:	e0bff817 	ldw	r2,-32(fp)
   12128:	100b883a 	mov	r5,r2
   1212c:	e13ffc17 	ldw	r4,-16(fp)
   12130:	0011f240 	call	11f24 <alt_ic_irq_enable>
   12134:	00000406 	br	12148 <alt_iic_isr_register+0xc4>
   12138:	e0bff817 	ldw	r2,-32(fp)
   1213c:	100b883a 	mov	r5,r2
   12140:	e13ffc17 	ldw	r4,-16(fp)
   12144:	0011fac0 	call	11fac <alt_ic_irq_disable>
   12148:	e0bff715 	stw	r2,-36(fp)
   1214c:	e0bffa17 	ldw	r2,-24(fp)
   12150:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12154:	e0bff917 	ldw	r2,-28(fp)
   12158:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1215c:	e0bff717 	ldw	r2,-36(fp)
}
   12160:	e037883a 	mov	sp,fp
   12164:	dfc00117 	ldw	ra,4(sp)
   12168:	df000017 	ldw	fp,0(sp)
   1216c:	dec00204 	addi	sp,sp,8
   12170:	f800283a 	ret

00012174 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   12174:	defff804 	addi	sp,sp,-32
   12178:	dfc00715 	stw	ra,28(sp)
   1217c:	df000615 	stw	fp,24(sp)
   12180:	dc000515 	stw	r16,20(sp)
   12184:	df000604 	addi	fp,sp,24
   12188:	e13ffb15 	stw	r4,-20(fp)
   1218c:	e17ffc15 	stw	r5,-16(fp)
   12190:	e1bffd15 	stw	r6,-12(fp)
   12194:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   12198:	e1bffe17 	ldw	r6,-8(fp)
   1219c:	e17ffd17 	ldw	r5,-12(fp)
   121a0:	e13ffc17 	ldw	r4,-16(fp)
   121a4:	00123fc0 	call	123fc <open>
   121a8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   121ac:	e0bffa17 	ldw	r2,-24(fp)
   121b0:	10002216 	blt	r2,zero,1223c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   121b4:	04000074 	movhi	r16,1
   121b8:	840fa004 	addi	r16,r16,16000
   121bc:	e0bffa17 	ldw	r2,-24(fp)
   121c0:	01400304 	movi	r5,12
   121c4:	1009883a 	mov	r4,r2
   121c8:	0010be40 	call	10be4 <__mulsi3>
   121cc:	8085883a 	add	r2,r16,r2
   121d0:	10c00017 	ldw	r3,0(r2)
   121d4:	e0bffb17 	ldw	r2,-20(fp)
   121d8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   121dc:	04000074 	movhi	r16,1
   121e0:	840fa004 	addi	r16,r16,16000
   121e4:	e0bffa17 	ldw	r2,-24(fp)
   121e8:	01400304 	movi	r5,12
   121ec:	1009883a 	mov	r4,r2
   121f0:	0010be40 	call	10be4 <__mulsi3>
   121f4:	8085883a 	add	r2,r16,r2
   121f8:	10800104 	addi	r2,r2,4
   121fc:	10c00017 	ldw	r3,0(r2)
   12200:	e0bffb17 	ldw	r2,-20(fp)
   12204:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   12208:	04000074 	movhi	r16,1
   1220c:	840fa004 	addi	r16,r16,16000
   12210:	e0bffa17 	ldw	r2,-24(fp)
   12214:	01400304 	movi	r5,12
   12218:	1009883a 	mov	r4,r2
   1221c:	0010be40 	call	10be4 <__mulsi3>
   12220:	8085883a 	add	r2,r16,r2
   12224:	10800204 	addi	r2,r2,8
   12228:	10c00017 	ldw	r3,0(r2)
   1222c:	e0bffb17 	ldw	r2,-20(fp)
   12230:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   12234:	e13ffa17 	ldw	r4,-24(fp)
   12238:	00125580 	call	12558 <alt_release_fd>
  }
} 
   1223c:	0001883a 	nop
   12240:	e6ffff04 	addi	sp,fp,-4
   12244:	dfc00217 	ldw	ra,8(sp)
   12248:	df000117 	ldw	fp,4(sp)
   1224c:	dc000017 	ldw	r16,0(sp)
   12250:	dec00304 	addi	sp,sp,12
   12254:	f800283a 	ret

00012258 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   12258:	defffb04 	addi	sp,sp,-20
   1225c:	dfc00415 	stw	ra,16(sp)
   12260:	df000315 	stw	fp,12(sp)
   12264:	df000304 	addi	fp,sp,12
   12268:	e13ffd15 	stw	r4,-12(fp)
   1226c:	e17ffe15 	stw	r5,-8(fp)
   12270:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   12274:	01c07fc4 	movi	r7,511
   12278:	01800044 	movi	r6,1
   1227c:	e17ffd17 	ldw	r5,-12(fp)
   12280:	01000074 	movhi	r4,1
   12284:	210fa304 	addi	r4,r4,16012
   12288:	00121740 	call	12174 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1228c:	01c07fc4 	movi	r7,511
   12290:	000d883a 	mov	r6,zero
   12294:	e17ffe17 	ldw	r5,-8(fp)
   12298:	01000074 	movhi	r4,1
   1229c:	210fa004 	addi	r4,r4,16000
   122a0:	00121740 	call	12174 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   122a4:	01c07fc4 	movi	r7,511
   122a8:	01800044 	movi	r6,1
   122ac:	e17fff17 	ldw	r5,-4(fp)
   122b0:	01000074 	movhi	r4,1
   122b4:	210fa604 	addi	r4,r4,16024
   122b8:	00121740 	call	12174 <alt_open_fd>
}  
   122bc:	0001883a 	nop
   122c0:	e037883a 	mov	sp,fp
   122c4:	dfc00117 	ldw	ra,4(sp)
   122c8:	df000017 	ldw	fp,0(sp)
   122cc:	dec00204 	addi	sp,sp,8
   122d0:	f800283a 	ret

000122d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   122d4:	defffe04 	addi	sp,sp,-8
   122d8:	dfc00115 	stw	ra,4(sp)
   122dc:	df000015 	stw	fp,0(sp)
   122e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   122e4:	d0a00717 	ldw	r2,-32740(gp)
   122e8:	10000326 	beq	r2,zero,122f8 <alt_get_errno+0x24>
   122ec:	d0a00717 	ldw	r2,-32740(gp)
   122f0:	103ee83a 	callr	r2
   122f4:	00000106 	br	122fc <alt_get_errno+0x28>
   122f8:	d0a4d104 	addi	r2,gp,-27836
}
   122fc:	e037883a 	mov	sp,fp
   12300:	dfc00117 	ldw	ra,4(sp)
   12304:	df000017 	ldw	fp,0(sp)
   12308:	dec00204 	addi	sp,sp,8
   1230c:	f800283a 	ret

00012310 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12310:	defffb04 	addi	sp,sp,-20
   12314:	dfc00415 	stw	ra,16(sp)
   12318:	df000315 	stw	fp,12(sp)
   1231c:	dc000215 	stw	r16,8(sp)
   12320:	df000304 	addi	fp,sp,12
   12324:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   12328:	e0bffe17 	ldw	r2,-8(fp)
   1232c:	10800217 	ldw	r2,8(r2)
   12330:	10d00034 	orhi	r3,r2,16384
   12334:	e0bffe17 	ldw	r2,-8(fp)
   12338:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1233c:	e03ffd15 	stw	zero,-12(fp)
   12340:	00002306 	br	123d0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12344:	04000074 	movhi	r16,1
   12348:	840fa004 	addi	r16,r16,16000
   1234c:	e0bffd17 	ldw	r2,-12(fp)
   12350:	01400304 	movi	r5,12
   12354:	1009883a 	mov	r4,r2
   12358:	0010be40 	call	10be4 <__mulsi3>
   1235c:	8085883a 	add	r2,r16,r2
   12360:	10c00017 	ldw	r3,0(r2)
   12364:	e0bffe17 	ldw	r2,-8(fp)
   12368:	10800017 	ldw	r2,0(r2)
   1236c:	1880151e 	bne	r3,r2,123c4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12370:	04000074 	movhi	r16,1
   12374:	840fa004 	addi	r16,r16,16000
   12378:	e0bffd17 	ldw	r2,-12(fp)
   1237c:	01400304 	movi	r5,12
   12380:	1009883a 	mov	r4,r2
   12384:	0010be40 	call	10be4 <__mulsi3>
   12388:	8085883a 	add	r2,r16,r2
   1238c:	10800204 	addi	r2,r2,8
   12390:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12394:	10000b0e 	bge	r2,zero,123c4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   12398:	01400304 	movi	r5,12
   1239c:	e13ffd17 	ldw	r4,-12(fp)
   123a0:	0010be40 	call	10be4 <__mulsi3>
   123a4:	1007883a 	mov	r3,r2
   123a8:	00800074 	movhi	r2,1
   123ac:	108fa004 	addi	r2,r2,16000
   123b0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   123b4:	e0bffe17 	ldw	r2,-8(fp)
   123b8:	18800226 	beq	r3,r2,123c4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   123bc:	00bffcc4 	movi	r2,-13
   123c0:	00000806 	br	123e4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   123c4:	e0bffd17 	ldw	r2,-12(fp)
   123c8:	10800044 	addi	r2,r2,1
   123cc:	e0bffd15 	stw	r2,-12(fp)
   123d0:	d0a00617 	ldw	r2,-32744(gp)
   123d4:	1007883a 	mov	r3,r2
   123d8:	e0bffd17 	ldw	r2,-12(fp)
   123dc:	18bfd92e 	bgeu	r3,r2,12344 <_gp+0xffff6344>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   123e0:	0005883a 	mov	r2,zero
}
   123e4:	e6ffff04 	addi	sp,fp,-4
   123e8:	dfc00217 	ldw	ra,8(sp)
   123ec:	df000117 	ldw	fp,4(sp)
   123f0:	dc000017 	ldw	r16,0(sp)
   123f4:	dec00304 	addi	sp,sp,12
   123f8:	f800283a 	ret

000123fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   123fc:	defff604 	addi	sp,sp,-40
   12400:	dfc00915 	stw	ra,36(sp)
   12404:	df000815 	stw	fp,32(sp)
   12408:	df000804 	addi	fp,sp,32
   1240c:	e13ffd15 	stw	r4,-12(fp)
   12410:	e17ffe15 	stw	r5,-8(fp)
   12414:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12418:	00bfffc4 	movi	r2,-1
   1241c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12420:	00bffb44 	movi	r2,-19
   12424:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   12428:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1242c:	d1600404 	addi	r5,gp,-32752
   12430:	e13ffd17 	ldw	r4,-12(fp)
   12434:	00127a40 	call	127a4 <alt_find_dev>
   12438:	e0bff815 	stw	r2,-32(fp)
   1243c:	e0bff817 	ldw	r2,-32(fp)
   12440:	1000051e 	bne	r2,zero,12458 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12444:	e13ffd17 	ldw	r4,-12(fp)
   12448:	00128340 	call	12834 <alt_find_file>
   1244c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   12450:	00800044 	movi	r2,1
   12454:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12458:	e0bff817 	ldw	r2,-32(fp)
   1245c:	10002b26 	beq	r2,zero,1250c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12460:	e13ff817 	ldw	r4,-32(fp)
   12464:	001293c0 	call	1293c <alt_get_fd>
   12468:	e0bff915 	stw	r2,-28(fp)
   1246c:	e0bff917 	ldw	r2,-28(fp)
   12470:	1000030e 	bge	r2,zero,12480 <open+0x84>
    {
      status = index;
   12474:	e0bff917 	ldw	r2,-28(fp)
   12478:	e0bffa15 	stw	r2,-24(fp)
   1247c:	00002506 	br	12514 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   12480:	01400304 	movi	r5,12
   12484:	e13ff917 	ldw	r4,-28(fp)
   12488:	0010be40 	call	10be4 <__mulsi3>
   1248c:	1007883a 	mov	r3,r2
   12490:	00800074 	movhi	r2,1
   12494:	108fa004 	addi	r2,r2,16000
   12498:	1885883a 	add	r2,r3,r2
   1249c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   124a0:	e0fffe17 	ldw	r3,-8(fp)
   124a4:	00900034 	movhi	r2,16384
   124a8:	10bfffc4 	addi	r2,r2,-1
   124ac:	1886703a 	and	r3,r3,r2
   124b0:	e0bffc17 	ldw	r2,-16(fp)
   124b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   124b8:	e0bffb17 	ldw	r2,-20(fp)
   124bc:	1000051e 	bne	r2,zero,124d4 <open+0xd8>
   124c0:	e13ffc17 	ldw	r4,-16(fp)
   124c4:	00123100 	call	12310 <alt_file_locked>
   124c8:	e0bffa15 	stw	r2,-24(fp)
   124cc:	e0bffa17 	ldw	r2,-24(fp)
   124d0:	10001016 	blt	r2,zero,12514 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   124d4:	e0bff817 	ldw	r2,-32(fp)
   124d8:	10800317 	ldw	r2,12(r2)
   124dc:	10000826 	beq	r2,zero,12500 <open+0x104>
   124e0:	e0bff817 	ldw	r2,-32(fp)
   124e4:	10800317 	ldw	r2,12(r2)
   124e8:	e1ffff17 	ldw	r7,-4(fp)
   124ec:	e1bffe17 	ldw	r6,-8(fp)
   124f0:	e17ffd17 	ldw	r5,-12(fp)
   124f4:	e13ffc17 	ldw	r4,-16(fp)
   124f8:	103ee83a 	callr	r2
   124fc:	00000106 	br	12504 <open+0x108>
   12500:	0005883a 	mov	r2,zero
   12504:	e0bffa15 	stw	r2,-24(fp)
   12508:	00000206 	br	12514 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1250c:	00bffb44 	movi	r2,-19
   12510:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12514:	e0bffa17 	ldw	r2,-24(fp)
   12518:	1000090e 	bge	r2,zero,12540 <open+0x144>
  {
    alt_release_fd (index);  
   1251c:	e13ff917 	ldw	r4,-28(fp)
   12520:	00125580 	call	12558 <alt_release_fd>
    ALT_ERRNO = -status;
   12524:	00122d40 	call	122d4 <alt_get_errno>
   12528:	1007883a 	mov	r3,r2
   1252c:	e0bffa17 	ldw	r2,-24(fp)
   12530:	0085c83a 	sub	r2,zero,r2
   12534:	18800015 	stw	r2,0(r3)
    return -1;
   12538:	00bfffc4 	movi	r2,-1
   1253c:	00000106 	br	12544 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   12540:	e0bff917 	ldw	r2,-28(fp)
}
   12544:	e037883a 	mov	sp,fp
   12548:	dfc00117 	ldw	ra,4(sp)
   1254c:	df000017 	ldw	fp,0(sp)
   12550:	dec00204 	addi	sp,sp,8
   12554:	f800283a 	ret

00012558 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12558:	defffc04 	addi	sp,sp,-16
   1255c:	dfc00315 	stw	ra,12(sp)
   12560:	df000215 	stw	fp,8(sp)
   12564:	dc000115 	stw	r16,4(sp)
   12568:	df000204 	addi	fp,sp,8
   1256c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   12570:	e0bffe17 	ldw	r2,-8(fp)
   12574:	108000d0 	cmplti	r2,r2,3
   12578:	1000111e 	bne	r2,zero,125c0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1257c:	04000074 	movhi	r16,1
   12580:	840fa004 	addi	r16,r16,16000
   12584:	e0bffe17 	ldw	r2,-8(fp)
   12588:	01400304 	movi	r5,12
   1258c:	1009883a 	mov	r4,r2
   12590:	0010be40 	call	10be4 <__mulsi3>
   12594:	8085883a 	add	r2,r16,r2
   12598:	10800204 	addi	r2,r2,8
   1259c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   125a0:	04000074 	movhi	r16,1
   125a4:	840fa004 	addi	r16,r16,16000
   125a8:	e0bffe17 	ldw	r2,-8(fp)
   125ac:	01400304 	movi	r5,12
   125b0:	1009883a 	mov	r4,r2
   125b4:	0010be40 	call	10be4 <__mulsi3>
   125b8:	8085883a 	add	r2,r16,r2
   125bc:	10000015 	stw	zero,0(r2)
  }
}
   125c0:	0001883a 	nop
   125c4:	e6ffff04 	addi	sp,fp,-4
   125c8:	dfc00217 	ldw	ra,8(sp)
   125cc:	df000117 	ldw	fp,4(sp)
   125d0:	dc000017 	ldw	r16,0(sp)
   125d4:	dec00304 	addi	sp,sp,12
   125d8:	f800283a 	ret

000125dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   125dc:	defffa04 	addi	sp,sp,-24
   125e0:	df000515 	stw	fp,20(sp)
   125e4:	df000504 	addi	fp,sp,20
   125e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125ec:	0005303a 	rdctl	r2,status
   125f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125f4:	e0fffc17 	ldw	r3,-16(fp)
   125f8:	00bfff84 	movi	r2,-2
   125fc:	1884703a 	and	r2,r3,r2
   12600:	1001703a 	wrctl	status,r2
  
  return context;
   12604:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   12608:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1260c:	e0bfff17 	ldw	r2,-4(fp)
   12610:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12614:	e0bffd17 	ldw	r2,-12(fp)
   12618:	10800017 	ldw	r2,0(r2)
   1261c:	e0fffd17 	ldw	r3,-12(fp)
   12620:	18c00117 	ldw	r3,4(r3)
   12624:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   12628:	e0bffd17 	ldw	r2,-12(fp)
   1262c:	10800117 	ldw	r2,4(r2)
   12630:	e0fffd17 	ldw	r3,-12(fp)
   12634:	18c00017 	ldw	r3,0(r3)
   12638:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1263c:	e0bffd17 	ldw	r2,-12(fp)
   12640:	e0fffd17 	ldw	r3,-12(fp)
   12644:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   12648:	e0bffd17 	ldw	r2,-12(fp)
   1264c:	e0fffd17 	ldw	r3,-12(fp)
   12650:	10c00015 	stw	r3,0(r2)
   12654:	e0bffb17 	ldw	r2,-20(fp)
   12658:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1265c:	e0bffe17 	ldw	r2,-8(fp)
   12660:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12664:	0001883a 	nop
   12668:	e037883a 	mov	sp,fp
   1266c:	df000017 	ldw	fp,0(sp)
   12670:	dec00104 	addi	sp,sp,4
   12674:	f800283a 	ret

00012678 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12678:	defffb04 	addi	sp,sp,-20
   1267c:	dfc00415 	stw	ra,16(sp)
   12680:	df000315 	stw	fp,12(sp)
   12684:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12688:	d0a00917 	ldw	r2,-32732(gp)
   1268c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12690:	d0a4d717 	ldw	r2,-27812(gp)
   12694:	10800044 	addi	r2,r2,1
   12698:	d0a4d715 	stw	r2,-27812(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1269c:	00002e06 	br	12758 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   126a0:	e0bffd17 	ldw	r2,-12(fp)
   126a4:	10800017 	ldw	r2,0(r2)
   126a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   126ac:	e0bffd17 	ldw	r2,-12(fp)
   126b0:	10800403 	ldbu	r2,16(r2)
   126b4:	10803fcc 	andi	r2,r2,255
   126b8:	10000426 	beq	r2,zero,126cc <alt_tick+0x54>
   126bc:	d0a4d717 	ldw	r2,-27812(gp)
   126c0:	1000021e 	bne	r2,zero,126cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   126c4:	e0bffd17 	ldw	r2,-12(fp)
   126c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   126cc:	e0bffd17 	ldw	r2,-12(fp)
   126d0:	10800217 	ldw	r2,8(r2)
   126d4:	d0e4d717 	ldw	r3,-27812(gp)
   126d8:	18801d36 	bltu	r3,r2,12750 <alt_tick+0xd8>
   126dc:	e0bffd17 	ldw	r2,-12(fp)
   126e0:	10800403 	ldbu	r2,16(r2)
   126e4:	10803fcc 	andi	r2,r2,255
   126e8:	1000191e 	bne	r2,zero,12750 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   126ec:	e0bffd17 	ldw	r2,-12(fp)
   126f0:	10800317 	ldw	r2,12(r2)
   126f4:	e0fffd17 	ldw	r3,-12(fp)
   126f8:	18c00517 	ldw	r3,20(r3)
   126fc:	1809883a 	mov	r4,r3
   12700:	103ee83a 	callr	r2
   12704:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12708:	e0bfff17 	ldw	r2,-4(fp)
   1270c:	1000031e 	bne	r2,zero,1271c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   12710:	e13ffd17 	ldw	r4,-12(fp)
   12714:	00125dc0 	call	125dc <alt_alarm_stop>
   12718:	00000d06 	br	12750 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1271c:	e0bffd17 	ldw	r2,-12(fp)
   12720:	10c00217 	ldw	r3,8(r2)
   12724:	e0bfff17 	ldw	r2,-4(fp)
   12728:	1887883a 	add	r3,r3,r2
   1272c:	e0bffd17 	ldw	r2,-12(fp)
   12730:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12734:	e0bffd17 	ldw	r2,-12(fp)
   12738:	10c00217 	ldw	r3,8(r2)
   1273c:	d0a4d717 	ldw	r2,-27812(gp)
   12740:	1880032e 	bgeu	r3,r2,12750 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   12744:	e0bffd17 	ldw	r2,-12(fp)
   12748:	00c00044 	movi	r3,1
   1274c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   12750:	e0bffe17 	ldw	r2,-8(fp)
   12754:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12758:	e0fffd17 	ldw	r3,-12(fp)
   1275c:	d0a00904 	addi	r2,gp,-32732
   12760:	18bfcf1e 	bne	r3,r2,126a0 <_gp+0xffff66a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12764:	0001883a 	nop
}
   12768:	0001883a 	nop
   1276c:	e037883a 	mov	sp,fp
   12770:	dfc00117 	ldw	ra,4(sp)
   12774:	df000017 	ldw	fp,0(sp)
   12778:	dec00204 	addi	sp,sp,8
   1277c:	f800283a 	ret

00012780 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12780:	deffff04 	addi	sp,sp,-4
   12784:	df000015 	stw	fp,0(sp)
   12788:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1278c:	000170fa 	wrctl	ienable,zero
}
   12790:	0001883a 	nop
   12794:	e037883a 	mov	sp,fp
   12798:	df000017 	ldw	fp,0(sp)
   1279c:	dec00104 	addi	sp,sp,4
   127a0:	f800283a 	ret

000127a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   127a4:	defffa04 	addi	sp,sp,-24
   127a8:	dfc00515 	stw	ra,20(sp)
   127ac:	df000415 	stw	fp,16(sp)
   127b0:	df000404 	addi	fp,sp,16
   127b4:	e13ffe15 	stw	r4,-8(fp)
   127b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   127bc:	e0bfff17 	ldw	r2,-4(fp)
   127c0:	10800017 	ldw	r2,0(r2)
   127c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   127c8:	e13ffe17 	ldw	r4,-8(fp)
   127cc:	00109bc0 	call	109bc <strlen>
   127d0:	10800044 	addi	r2,r2,1
   127d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   127d8:	00000d06 	br	12810 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   127dc:	e0bffc17 	ldw	r2,-16(fp)
   127e0:	10800217 	ldw	r2,8(r2)
   127e4:	e0fffd17 	ldw	r3,-12(fp)
   127e8:	180d883a 	mov	r6,r3
   127ec:	e17ffe17 	ldw	r5,-8(fp)
   127f0:	1009883a 	mov	r4,r2
   127f4:	0012abc0 	call	12abc <memcmp>
   127f8:	1000021e 	bne	r2,zero,12804 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   127fc:	e0bffc17 	ldw	r2,-16(fp)
   12800:	00000706 	br	12820 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12804:	e0bffc17 	ldw	r2,-16(fp)
   12808:	10800017 	ldw	r2,0(r2)
   1280c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12810:	e0fffc17 	ldw	r3,-16(fp)
   12814:	e0bfff17 	ldw	r2,-4(fp)
   12818:	18bff01e 	bne	r3,r2,127dc <_gp+0xffff67dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1281c:	0005883a 	mov	r2,zero
}
   12820:	e037883a 	mov	sp,fp
   12824:	dfc00117 	ldw	ra,4(sp)
   12828:	df000017 	ldw	fp,0(sp)
   1282c:	dec00204 	addi	sp,sp,8
   12830:	f800283a 	ret

00012834 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12834:	defffb04 	addi	sp,sp,-20
   12838:	dfc00415 	stw	ra,16(sp)
   1283c:	df000315 	stw	fp,12(sp)
   12840:	df000304 	addi	fp,sp,12
   12844:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12848:	d0a00217 	ldw	r2,-32760(gp)
   1284c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12850:	00003106 	br	12918 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   12854:	e0bffd17 	ldw	r2,-12(fp)
   12858:	10800217 	ldw	r2,8(r2)
   1285c:	1009883a 	mov	r4,r2
   12860:	00109bc0 	call	109bc <strlen>
   12864:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12868:	e0bffd17 	ldw	r2,-12(fp)
   1286c:	10c00217 	ldw	r3,8(r2)
   12870:	e0bffe17 	ldw	r2,-8(fp)
   12874:	10bfffc4 	addi	r2,r2,-1
   12878:	1885883a 	add	r2,r3,r2
   1287c:	10800003 	ldbu	r2,0(r2)
   12880:	10803fcc 	andi	r2,r2,255
   12884:	1080201c 	xori	r2,r2,128
   12888:	10bfe004 	addi	r2,r2,-128
   1288c:	10800bd8 	cmpnei	r2,r2,47
   12890:	1000031e 	bne	r2,zero,128a0 <alt_find_file+0x6c>
    {
      len -= 1;
   12894:	e0bffe17 	ldw	r2,-8(fp)
   12898:	10bfffc4 	addi	r2,r2,-1
   1289c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   128a0:	e0bffe17 	ldw	r2,-8(fp)
   128a4:	e0ffff17 	ldw	r3,-4(fp)
   128a8:	1885883a 	add	r2,r3,r2
   128ac:	10800003 	ldbu	r2,0(r2)
   128b0:	10803fcc 	andi	r2,r2,255
   128b4:	1080201c 	xori	r2,r2,128
   128b8:	10bfe004 	addi	r2,r2,-128
   128bc:	10800be0 	cmpeqi	r2,r2,47
   128c0:	1000081e 	bne	r2,zero,128e4 <alt_find_file+0xb0>
   128c4:	e0bffe17 	ldw	r2,-8(fp)
   128c8:	e0ffff17 	ldw	r3,-4(fp)
   128cc:	1885883a 	add	r2,r3,r2
   128d0:	10800003 	ldbu	r2,0(r2)
   128d4:	10803fcc 	andi	r2,r2,255
   128d8:	1080201c 	xori	r2,r2,128
   128dc:	10bfe004 	addi	r2,r2,-128
   128e0:	10000a1e 	bne	r2,zero,1290c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   128e4:	e0bffd17 	ldw	r2,-12(fp)
   128e8:	10800217 	ldw	r2,8(r2)
   128ec:	e0fffe17 	ldw	r3,-8(fp)
   128f0:	180d883a 	mov	r6,r3
   128f4:	e17fff17 	ldw	r5,-4(fp)
   128f8:	1009883a 	mov	r4,r2
   128fc:	0012abc0 	call	12abc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12900:	1000021e 	bne	r2,zero,1290c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12904:	e0bffd17 	ldw	r2,-12(fp)
   12908:	00000706 	br	12928 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1290c:	e0bffd17 	ldw	r2,-12(fp)
   12910:	10800017 	ldw	r2,0(r2)
   12914:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12918:	e0fffd17 	ldw	r3,-12(fp)
   1291c:	d0a00204 	addi	r2,gp,-32760
   12920:	18bfcc1e 	bne	r3,r2,12854 <_gp+0xffff6854>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12924:	0005883a 	mov	r2,zero
}
   12928:	e037883a 	mov	sp,fp
   1292c:	dfc00117 	ldw	ra,4(sp)
   12930:	df000017 	ldw	fp,0(sp)
   12934:	dec00204 	addi	sp,sp,8
   12938:	f800283a 	ret

0001293c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1293c:	defffa04 	addi	sp,sp,-24
   12940:	dfc00515 	stw	ra,20(sp)
   12944:	df000415 	stw	fp,16(sp)
   12948:	dc000315 	stw	r16,12(sp)
   1294c:	df000404 	addi	fp,sp,16
   12950:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   12954:	00bffa04 	movi	r2,-24
   12958:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1295c:	e03ffc15 	stw	zero,-16(fp)
   12960:	00001d06 	br	129d8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   12964:	04000074 	movhi	r16,1
   12968:	840fa004 	addi	r16,r16,16000
   1296c:	e0bffc17 	ldw	r2,-16(fp)
   12970:	01400304 	movi	r5,12
   12974:	1009883a 	mov	r4,r2
   12978:	0010be40 	call	10be4 <__mulsi3>
   1297c:	8085883a 	add	r2,r16,r2
   12980:	10800017 	ldw	r2,0(r2)
   12984:	1000111e 	bne	r2,zero,129cc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   12988:	04000074 	movhi	r16,1
   1298c:	840fa004 	addi	r16,r16,16000
   12990:	e0bffc17 	ldw	r2,-16(fp)
   12994:	01400304 	movi	r5,12
   12998:	1009883a 	mov	r4,r2
   1299c:	0010be40 	call	10be4 <__mulsi3>
   129a0:	8085883a 	add	r2,r16,r2
   129a4:	e0fffe17 	ldw	r3,-8(fp)
   129a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   129ac:	d0e00617 	ldw	r3,-32744(gp)
   129b0:	e0bffc17 	ldw	r2,-16(fp)
   129b4:	1880020e 	bge	r3,r2,129c0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   129b8:	e0bffc17 	ldw	r2,-16(fp)
   129bc:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   129c0:	e0bffc17 	ldw	r2,-16(fp)
   129c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   129c8:	00000606 	br	129e4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   129cc:	e0bffc17 	ldw	r2,-16(fp)
   129d0:	10800044 	addi	r2,r2,1
   129d4:	e0bffc15 	stw	r2,-16(fp)
   129d8:	e0bffc17 	ldw	r2,-16(fp)
   129dc:	10800810 	cmplti	r2,r2,32
   129e0:	103fe01e 	bne	r2,zero,12964 <_gp+0xffff6964>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   129e4:	e0bffd17 	ldw	r2,-12(fp)
}
   129e8:	e6ffff04 	addi	sp,fp,-4
   129ec:	dfc00217 	ldw	ra,8(sp)
   129f0:	df000117 	ldw	fp,4(sp)
   129f4:	dc000017 	ldw	r16,0(sp)
   129f8:	dec00304 	addi	sp,sp,12
   129fc:	f800283a 	ret

00012a00 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   12a00:	defffe04 	addi	sp,sp,-8
   12a04:	df000115 	stw	fp,4(sp)
   12a08:	df000104 	addi	fp,sp,4
   12a0c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   12a10:	e0bfff17 	ldw	r2,-4(fp)
   12a14:	10bffe84 	addi	r2,r2,-6
   12a18:	10c00428 	cmpgeui	r3,r2,16
   12a1c:	18001a1e 	bne	r3,zero,12a88 <alt_exception_cause_generated_bad_addr+0x88>
   12a20:	100690ba 	slli	r3,r2,2
   12a24:	00800074 	movhi	r2,1
   12a28:	108a8e04 	addi	r2,r2,10808
   12a2c:	1885883a 	add	r2,r3,r2
   12a30:	10800017 	ldw	r2,0(r2)
   12a34:	1000683a 	jmp	r2
   12a38:	00012a78 	rdprs	zero,zero,1193
   12a3c:	00012a78 	rdprs	zero,zero,1193
   12a40:	00012a88 	cmpgei	zero,zero,1194
   12a44:	00012a88 	cmpgei	zero,zero,1194
   12a48:	00012a88 	cmpgei	zero,zero,1194
   12a4c:	00012a78 	rdprs	zero,zero,1193
   12a50:	00012a80 	call	12a8 <__alt_mem_onchip_memory2_0-0xed58>
   12a54:	00012a88 	cmpgei	zero,zero,1194
   12a58:	00012a78 	rdprs	zero,zero,1193
   12a5c:	00012a78 	rdprs	zero,zero,1193
   12a60:	00012a88 	cmpgei	zero,zero,1194
   12a64:	00012a78 	rdprs	zero,zero,1193
   12a68:	00012a80 	call	12a8 <__alt_mem_onchip_memory2_0-0xed58>
   12a6c:	00012a88 	cmpgei	zero,zero,1194
   12a70:	00012a88 	cmpgei	zero,zero,1194
   12a74:	00012a78 	rdprs	zero,zero,1193
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12a78:	00800044 	movi	r2,1
   12a7c:	00000306 	br	12a8c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12a80:	0005883a 	mov	r2,zero
   12a84:	00000106 	br	12a8c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12a88:	0005883a 	mov	r2,zero
  }
}
   12a8c:	e037883a 	mov	sp,fp
   12a90:	df000017 	ldw	fp,0(sp)
   12a94:	dec00104 	addi	sp,sp,4
   12a98:	f800283a 	ret

00012a9c <exit>:
   12a9c:	defffe04 	addi	sp,sp,-8
   12aa0:	000b883a 	mov	r5,zero
   12aa4:	dc000015 	stw	r16,0(sp)
   12aa8:	dfc00115 	stw	ra,4(sp)
   12aac:	2021883a 	mov	r16,r4
   12ab0:	0012b140 	call	12b14 <__call_exitprocs>
   12ab4:	8009883a 	mov	r4,r16
   12ab8:	0012ca40 	call	12ca4 <_exit>

00012abc <memcmp>:
   12abc:	218d883a 	add	r6,r4,r6
   12ac0:	21800826 	beq	r4,r6,12ae4 <memcmp+0x28>
   12ac4:	20800003 	ldbu	r2,0(r4)
   12ac8:	28c00003 	ldbu	r3,0(r5)
   12acc:	10c00226 	beq	r2,r3,12ad8 <memcmp+0x1c>
   12ad0:	10c5c83a 	sub	r2,r2,r3
   12ad4:	f800283a 	ret
   12ad8:	21000044 	addi	r4,r4,1
   12adc:	29400044 	addi	r5,r5,1
   12ae0:	003ff706 	br	12ac0 <_gp+0xffff6ac0>
   12ae4:	0005883a 	mov	r2,zero
   12ae8:	f800283a 	ret

00012aec <memcpy>:
   12aec:	2005883a 	mov	r2,r4
   12af0:	2007883a 	mov	r3,r4
   12af4:	218d883a 	add	r6,r4,r6
   12af8:	19800526 	beq	r3,r6,12b10 <memcpy+0x24>
   12afc:	29000003 	ldbu	r4,0(r5)
   12b00:	18c00044 	addi	r3,r3,1
   12b04:	29400044 	addi	r5,r5,1
   12b08:	193fffc5 	stb	r4,-1(r3)
   12b0c:	003ffa06 	br	12af8 <_gp+0xffff6af8>
   12b10:	f800283a 	ret

00012b14 <__call_exitprocs>:
   12b14:	defff504 	addi	sp,sp,-44
   12b18:	dd000515 	stw	r20,20(sp)
   12b1c:	05000074 	movhi	r20,1
   12b20:	dc800315 	stw	r18,12(sp)
   12b24:	dfc00a15 	stw	ra,40(sp)
   12b28:	df000915 	stw	fp,36(sp)
   12b2c:	ddc00815 	stw	r23,32(sp)
   12b30:	dd800715 	stw	r22,28(sp)
   12b34:	dd400615 	stw	r21,24(sp)
   12b38:	dcc00415 	stw	r19,16(sp)
   12b3c:	dc400215 	stw	r17,8(sp)
   12b40:	dc000115 	stw	r16,4(sp)
   12b44:	d9000015 	stw	r4,0(sp)
   12b48:	2825883a 	mov	r18,r5
   12b4c:	a5100004 	addi	r20,r20,16384
   12b50:	a4400017 	ldw	r17,0(r20)
   12b54:	8cc00c17 	ldw	r19,48(r17)
   12b58:	8c400c04 	addi	r17,r17,48
   12b5c:	98004526 	beq	r19,zero,12c74 <__call_exitprocs+0x160>
   12b60:	9c000117 	ldw	r16,4(r19)
   12b64:	00900034 	movhi	r2,16384
   12b68:	10bfffc4 	addi	r2,r2,-1
   12b6c:	9d402217 	ldw	r21,136(r19)
   12b70:	85bfffc4 	addi	r22,r16,-1
   12b74:	80a1883a 	add	r16,r16,r2
   12b78:	8421883a 	add	r16,r16,r16
   12b7c:	8421883a 	add	r16,r16,r16
   12b80:	ac2f883a 	add	r23,r21,r16
   12b84:	84000204 	addi	r16,r16,8
   12b88:	9c21883a 	add	r16,r19,r16
   12b8c:	b0002716 	blt	r22,zero,12c2c <__call_exitprocs+0x118>
   12b90:	90000726 	beq	r18,zero,12bb0 <__call_exitprocs+0x9c>
   12b94:	a800041e 	bne	r21,zero,12ba8 <__call_exitprocs+0x94>
   12b98:	b5bfffc4 	addi	r22,r22,-1
   12b9c:	bdffff04 	addi	r23,r23,-4
   12ba0:	843fff04 	addi	r16,r16,-4
   12ba4:	003ff906 	br	12b8c <_gp+0xffff6b8c>
   12ba8:	b9002017 	ldw	r4,128(r23)
   12bac:	913ffa1e 	bne	r18,r4,12b98 <_gp+0xffff6b98>
   12bb0:	99000117 	ldw	r4,4(r19)
   12bb4:	82000017 	ldw	r8,0(r16)
   12bb8:	213fffc4 	addi	r4,r4,-1
   12bbc:	b100021e 	bne	r22,r4,12bc8 <__call_exitprocs+0xb4>
   12bc0:	9d800115 	stw	r22,4(r19)
   12bc4:	00000106 	br	12bcc <__call_exitprocs+0xb8>
   12bc8:	80000015 	stw	zero,0(r16)
   12bcc:	403ff226 	beq	r8,zero,12b98 <_gp+0xffff6b98>
   12bd0:	9f000117 	ldw	fp,4(r19)
   12bd4:	a8000526 	beq	r21,zero,12bec <__call_exitprocs+0xd8>
   12bd8:	00800044 	movi	r2,1
   12bdc:	1592983a 	sll	r9,r2,r22
   12be0:	a9404017 	ldw	r5,256(r21)
   12be4:	494a703a 	and	r5,r9,r5
   12be8:	2800021e 	bne	r5,zero,12bf4 <__call_exitprocs+0xe0>
   12bec:	403ee83a 	callr	r8
   12bf0:	00000906 	br	12c18 <__call_exitprocs+0x104>
   12bf4:	a9004117 	ldw	r4,260(r21)
   12bf8:	4908703a 	and	r4,r9,r4
   12bfc:	2000041e 	bne	r4,zero,12c10 <__call_exitprocs+0xfc>
   12c00:	b9400017 	ldw	r5,0(r23)
   12c04:	d9000017 	ldw	r4,0(sp)
   12c08:	403ee83a 	callr	r8
   12c0c:	00000206 	br	12c18 <__call_exitprocs+0x104>
   12c10:	b9000017 	ldw	r4,0(r23)
   12c14:	403ee83a 	callr	r8
   12c18:	99000117 	ldw	r4,4(r19)
   12c1c:	e13fcc1e 	bne	fp,r4,12b50 <_gp+0xffff6b50>
   12c20:	89000017 	ldw	r4,0(r17)
   12c24:	993fdc26 	beq	r19,r4,12b98 <_gp+0xffff6b98>
   12c28:	003fc906 	br	12b50 <_gp+0xffff6b50>
   12c2c:	00800034 	movhi	r2,0
   12c30:	10800004 	addi	r2,r2,0
   12c34:	10000f26 	beq	r2,zero,12c74 <__call_exitprocs+0x160>
   12c38:	99400117 	ldw	r5,4(r19)
   12c3c:	99000017 	ldw	r4,0(r19)
   12c40:	2800091e 	bne	r5,zero,12c68 <__call_exitprocs+0x154>
   12c44:	20000826 	beq	r4,zero,12c68 <__call_exitprocs+0x154>
   12c48:	89000015 	stw	r4,0(r17)
   12c4c:	a8000226 	beq	r21,zero,12c58 <__call_exitprocs+0x144>
   12c50:	a809883a 	mov	r4,r21
   12c54:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   12c58:	9809883a 	mov	r4,r19
   12c5c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   12c60:	8cc00017 	ldw	r19,0(r17)
   12c64:	003fbd06 	br	12b5c <_gp+0xffff6b5c>
   12c68:	9823883a 	mov	r17,r19
   12c6c:	2027883a 	mov	r19,r4
   12c70:	003fba06 	br	12b5c <_gp+0xffff6b5c>
   12c74:	dfc00a17 	ldw	ra,40(sp)
   12c78:	df000917 	ldw	fp,36(sp)
   12c7c:	ddc00817 	ldw	r23,32(sp)
   12c80:	dd800717 	ldw	r22,28(sp)
   12c84:	dd400617 	ldw	r21,24(sp)
   12c88:	dd000517 	ldw	r20,20(sp)
   12c8c:	dcc00417 	ldw	r19,16(sp)
   12c90:	dc800317 	ldw	r18,12(sp)
   12c94:	dc400217 	ldw	r17,8(sp)
   12c98:	dc000117 	ldw	r16,4(sp)
   12c9c:	dec00b04 	addi	sp,sp,44
   12ca0:	f800283a 	ret

00012ca4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12ca4:	defffd04 	addi	sp,sp,-12
   12ca8:	df000215 	stw	fp,8(sp)
   12cac:	df000204 	addi	fp,sp,8
   12cb0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12cb4:	0001883a 	nop
   12cb8:	e0bfff17 	ldw	r2,-4(fp)
   12cbc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12cc0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12cc4:	10000226 	beq	r2,zero,12cd0 <_exit+0x2c>
    ALT_SIM_FAIL();
   12cc8:	002af070 	cmpltui	zero,zero,43969
   12ccc:	00000106 	br	12cd4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12cd0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12cd4:	003fff06 	br	12cd4 <_gp+0xffff6cd4>
